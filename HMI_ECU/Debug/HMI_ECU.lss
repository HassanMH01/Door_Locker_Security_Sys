
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  000033b2  00003446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080010e  0080010e  000034f4  2**0
                  ALLOC
  3 .stab         00002e38  00000000  00000000  000034f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001200  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000766c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000077dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b0c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ef       	ldi	r26, 0xF9	; 249
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ef       	ldi	r24, 0xF9	; 249
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 87 19 	jmp	0x330e	; 0x330e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 g_sec=0;

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	65 97       	sbiw	r28, 0x15	; 21
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[PASSWORD_SIZE];
	uint8 confirmPass[PASSWORD_SIZE];
	CURRENT_MENU currentMenu=MENU_CREATE_PASS;
     b5a:	19 82       	std	Y+1, r1	; 0x01
	SREG |= (1<<7);
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
UART_init(&UART_Config);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 35 18 	call	0x306a	; 0x306a <UART_init>
LCD_init();
     b72:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <LCD_init>
Timer1_setCallBack(App_TickProcessing);
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	98 e0       	ldi	r25, 0x08	; 8
     b7a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <Timer1_setCallBack>
//case HAVE_PASS:
//	currentMenu=MENU_MAIN;
//	break;
//}
	while(1){
		if(failTrials>2){
     b7e:	80 91 0e 01 	lds	r24, 0x010E
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	18 f1       	brcs	.+70     	; 0xbcc <main+0x86>
			/*if fail trials reaches 3 times HMI sends it to control to take action*/
			UART_sendByte(EXCEEDED_TRIALS_COMMAND);
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	0e 94 a7 18 	call	0x314e	; 0x314e <UART_sendByte>
			LCD_clearScreen();
     b8c:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			LCD_displayString("Alert many");
     b98:	80 e6       	ldi	r24, 0x60	; 96
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
			LCD_moveCursor(1,0);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			LCD_displayString("incorrect trials!");
     ba8:	8b e6       	ldi	r24, 0x6B	; 107
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
			Timer1_init(&Timer1_Config);
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 98 17 	call	0x2f30	; 0x2f30 <Timer1_init>
			while(g_sec!=14);
     bb8:	80 91 0f 01 	lds	r24, 0x010F
     bbc:	8e 30       	cpi	r24, 0x0E	; 14
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <main+0x72>
			Timer1_deInit();
     bc0:	0e 94 08 18 	call	0x3010	; 0x3010 <Timer1_deInit>
			g_sec=0;
     bc4:	10 92 0f 01 	sts	0x010F, r1
			failTrials=0;
     bc8:	10 92 0e 01 	sts	0x010E, r1
//			currentMenu = MENU_MAIN;
		}
		switch(currentMenu){
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	3d 8b       	std	Y+21, r19	; 0x15
     bd4:	2c 8b       	std	Y+20, r18	; 0x14
     bd6:	8c 89       	ldd	r24, Y+20	; 0x14
     bd8:	9d 89       	ldd	r25, Y+21	; 0x15
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	91 05       	cpc	r25, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <main+0x9c>
     be0:	67 c0       	rjmp	.+206    	; 0xcb0 <main+0x16a>
     be2:	2c 89       	ldd	r18, Y+20	; 0x14
     be4:	3d 89       	ldd	r19, Y+21	; 0x15
     be6:	22 30       	cpi	r18, 0x02	; 2
     be8:	31 05       	cpc	r19, r1
     bea:	2c f4       	brge	.+10     	; 0xbf6 <main+0xb0>
     bec:	8c 89       	ldd	r24, Y+20	; 0x14
     bee:	9d 89       	ldd	r25, Y+21	; 0x15
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	71 f0       	breq	.+28     	; 0xc10 <main+0xca>
     bf4:	c4 cf       	rjmp	.-120    	; 0xb7e <main+0x38>
     bf6:	2c 89       	ldd	r18, Y+20	; 0x14
     bf8:	3d 89       	ldd	r19, Y+21	; 0x15
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <main+0xbc>
     c00:	80 c0       	rjmp	.+256    	; 0xd02 <main+0x1bc>
     c02:	8c 89       	ldd	r24, Y+20	; 0x14
     c04:	9d 89       	ldd	r25, Y+21	; 0x15
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <main+0xc8>
     c0c:	da c0       	rjmp	.+436    	; 0xdc2 <main+0x27c>
     c0e:	b7 cf       	rjmp	.-146    	; 0xb7e <main+0x38>
		case MENU_CREATE_PASS:
			LCD_clearScreen();
     c10:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			LCD_displayString("Hi, Enter Pass :");
     c1c:	8d e7       	ldi	r24, 0x7D	; 125
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
			LCD_moveCursor(1,0);
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>

			insertPass(pass);
     c2c:	ce 01       	movw	r24, r28
     c2e:	02 96       	adiw	r24, 0x02	; 2
     c30:	0e 94 4a 07 	call	0xe94	; 0xe94 <insertPass>

			LCD_clearScreen();
     c34:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			LCD_displayString("Enter Pass");
     c40:	8e e8       	ldi	r24, 0x8E	; 142
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
			LCD_moveCursor(1,0);
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			LCD_displayString("again: ");
     c50:	89 e9       	ldi	r24, 0x99	; 153
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>

			insertPass(confirmPass);
     c58:	ce 01       	movw	r24, r28
     c5a:	08 96       	adiw	r24, 0x08	; 8
     c5c:	0e 94 4a 07 	call	0xe94	; 0xe94 <insertPass>
			if(checkPass(pass,confirmPass) == NOT_MATCH ){
     c60:	ce 01       	movw	r24, r28
     c62:	02 96       	adiw	r24, 0x02	; 2
     c64:	9e 01       	movw	r18, r28
     c66:	28 5f       	subi	r18, 0xF8	; 248
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	b9 01       	movw	r22, r18
     c6c:	0e 94 15 07 	call	0xe2a	; 0xe2a <checkPass>
     c70:	88 23       	and	r24, r24
     c72:	31 f4       	brne	.+12     	; 0xc80 <main+0x13a>
				failTrials++;
     c74:	80 91 0e 01 	lds	r24, 0x010E
     c78:	8f 5f       	subi	r24, 0xFF	; 255
     c7a:	80 93 0e 01 	sts	0x010E, r24
     c7e:	7f cf       	rjmp	.-258    	; 0xb7e <main+0x38>
			}
			else{

		UART_sendByte(CREATE_PASS_COMMAND);
     c80:	8d ed       	ldi	r24, 0xDD	; 221
     c82:	0e 94 a7 18 	call	0x314e	; 0x314e <UART_sendByte>
		UART_sendString(pass);
     c86:	ce 01       	movw	r24, r28
     c88:	02 96       	adiw	r24, 0x02	; 2
     c8a:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendString>
		LCD_clearScreen();
     c8e:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
		LCD_moveCursor(0,0);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
		LCD_displayString("Please wait...");
     c9a:	81 ea       	ldi	r24, 0xA1	; 161
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
		while(UART_receiveByte()!= PROCCESS_DONE_COMMAND);
     ca2:	0e 94 be 18 	call	0x317c	; 0x317c <UART_receiveByte>
     ca6:	8c 3c       	cpi	r24, 0xCC	; 204
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x15c>
		currentMenu = MENU_MAIN;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	67 cf       	rjmp	.-306    	; 0xb7e <main+0x38>
			}
		break;

		case MENU_MAIN:
		LCD_clearScreen();
     cb0:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
		LCD_moveCursor(0,0);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
		LCD_displayString("+ : Open Door");
     cbc:	80 eb       	ldi	r24, 0xB0	; 176
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
		LCD_moveCursor(1,0);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
     ccc:	8e eb       	ldi	r24, 0xBE	; 190
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
			switch(KEYPAD_getPressedKey()){
     cd4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <KEYPAD_getPressedKey>
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3b 8b       	std	Y+19, r19	; 0x13
     cde:	2a 8b       	std	Y+18, r18	; 0x12
     ce0:	8a 89       	ldd	r24, Y+18	; 0x12
     ce2:	9b 89       	ldd	r25, Y+19	; 0x13
     ce4:	8b 32       	cpi	r24, 0x2B	; 43
     ce6:	91 05       	cpc	r25, r1
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <main+0x1b0>
     cea:	2a 89       	ldd	r18, Y+18	; 0x12
     cec:	3b 89       	ldd	r19, Y+19	; 0x13
     cee:	2d 32       	cpi	r18, 0x2D	; 45
     cf0:	31 05       	cpc	r19, r1
     cf2:	21 f0       	breq	.+8      	; 0xcfc <main+0x1b6>
     cf4:	44 cf       	rjmp	.-376    	; 0xb7e <main+0x38>
			case CHOICE_OPEN_DOOR:
				currentMenu = MENU_OPEN_DOOR;
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	41 cf       	rjmp	.-382    	; 0xb7e <main+0x38>
			break;
			case CHOICE_CHANGE_PASS:
				currentMenu = MENU_CHANGE_PASS;
     cfc:	83 e0       	ldi	r24, 0x03	; 3
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	3e cf       	rjmp	.-388    	; 0xb7e <main+0x38>
			break;
			}
		break;
		case MENU_OPEN_DOOR:
		LCD_clearScreen();
     d02:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
		LCD_moveCursor(0,0);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
		LCD_displayString("Enter Pass :");
     d0e:	8e ec       	ldi	r24, 0xCE	; 206
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
		LCD_moveCursor(1,0);
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
		insertPass(pass);
     d1e:	ce 01       	movw	r24, r28
     d20:	02 96       	adiw	r24, 0x02	; 2
     d22:	0e 94 4a 07 	call	0xe94	; 0xe94 <insertPass>

		UART_sendByte(CHECK_PASS_COMMAND);
     d26:	87 e1       	ldi	r24, 0x17	; 23
     d28:	0e 94 a7 18 	call	0x314e	; 0x314e <UART_sendByte>
		UART_sendString(pass);
     d2c:	ce 01       	movw	r24, r28
     d2e:	02 96       	adiw	r24, 0x02	; 2
     d30:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendString>
			switch(UART_receiveByte()){
     d34:	0e 94 be 18 	call	0x317c	; 0x317c <UART_receiveByte>
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	39 8b       	std	Y+17, r19	; 0x11
     d3e:	28 8b       	std	Y+16, r18	; 0x10
     d40:	88 89       	ldd	r24, Y+16	; 0x10
     d42:	99 89       	ldd	r25, Y+17	; 0x11
     d44:	88 31       	cpi	r24, 0x18	; 24
     d46:	91 05       	cpc	r25, r1
     d48:	31 f0       	breq	.+12     	; 0xd56 <main+0x210>
     d4a:	28 89       	ldd	r18, Y+16	; 0x10
     d4c:	39 89       	ldd	r19, Y+17	; 0x11
     d4e:	29 31       	cpi	r18, 0x19	; 25
     d50:	31 05       	cpc	r19, r1
     d52:	89 f1       	breq	.+98     	; 0xdb6 <main+0x270>
     d54:	14 cf       	rjmp	.-472    	; 0xb7e <main+0x38>
			case CORRECT_PASS_COMMAND:
				LCD_clearScreen();
     d56:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
				LCD_moveCursor(0,0);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
				LCD_displayString("Door Opening..");
     d62:	8b ed       	ldi	r24, 0xDB	; 219
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
				UART_sendByte(OPEN_DOOR_COMMAND);
     d6a:	8b eb       	ldi	r24, 0xBB	; 187
     d6c:	0e 94 a7 18 	call	0x314e	; 0x314e <UART_sendByte>
				Timer1_init(&Timer1_Config);
     d70:	88 e0       	ldi	r24, 0x08	; 8
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 98 17 	call	0x2f30	; 0x2f30 <Timer1_init>
				while(g_sec!=14);
     d78:	80 91 0f 01 	lds	r24, 0x010F
     d7c:	8e 30       	cpi	r24, 0x0E	; 14
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <main+0x232>
				Timer1_deInit();
     d80:	0e 94 08 18 	call	0x3010	; 0x3010 <Timer1_deInit>
				g_sec=0;
     d84:	10 92 0f 01 	sts	0x010F, r1
//				_delay_ms(18000);
				LCD_moveCursor(0,0);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
				LCD_displayString("Door Closing..");
     d90:	8a ee       	ldi	r24, 0xEA	; 234
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
				Timer1_init(&Timer1_Config);
     d98:	88 e0       	ldi	r24, 0x08	; 8
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <Timer1_init>
				while(g_sec!=10);
     da0:	80 91 0f 01 	lds	r24, 0x010F
     da4:	8a 30       	cpi	r24, 0x0A	; 10
     da6:	e1 f7       	brne	.-8      	; 0xda0 <main+0x25a>
				Timer1_deInit();
     da8:	0e 94 08 18 	call	0x3010	; 0x3010 <Timer1_deInit>
				g_sec=0;
     dac:	10 92 0f 01 	sts	0x010F, r1
//				_delay_ms(15000);
				currentMenu = MENU_MAIN;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	e4 ce       	rjmp	.-568    	; 0xb7e <main+0x38>
				break;
			case WRONG_PASS_COMMAND:
				failTrials++;
     db6:	80 91 0e 01 	lds	r24, 0x010E
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	80 93 0e 01 	sts	0x010E, r24
     dc0:	de ce       	rjmp	.-580    	; 0xb7e <main+0x38>
				break;
			}
		break;
		case MENU_CHANGE_PASS:
			LCD_clearScreen();
     dc2:	0e 94 28 17 	call	0x2e50	; 0x2e50 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			LCD_displayString("Enter Pass :");
     dce:	8e ec       	ldi	r24, 0xCE	; 206
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
			LCD_moveCursor(1,0);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
			insertPass(pass);
     dde:	ce 01       	movw	r24, r28
     de0:	02 96       	adiw	r24, 0x02	; 2
     de2:	0e 94 4a 07 	call	0xe94	; 0xe94 <insertPass>

			UART_sendByte(CHECK_PASS_COMMAND);
     de6:	87 e1       	ldi	r24, 0x17	; 23
     de8:	0e 94 a7 18 	call	0x314e	; 0x314e <UART_sendByte>
			UART_sendString(pass);
     dec:	ce 01       	movw	r24, r28
     dee:	02 96       	adiw	r24, 0x02	; 2
     df0:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendString>
				switch(UART_receiveByte()){
     df4:	0e 94 be 18 	call	0x317c	; 0x317c <UART_receiveByte>
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	3f 87       	std	Y+15, r19	; 0x0f
     dfe:	2e 87       	std	Y+14, r18	; 0x0e
     e00:	8e 85       	ldd	r24, Y+14	; 0x0e
     e02:	9f 85       	ldd	r25, Y+15	; 0x0f
     e04:	88 31       	cpi	r24, 0x18	; 24
     e06:	91 05       	cpc	r25, r1
     e08:	31 f0       	breq	.+12     	; 0xe16 <main+0x2d0>
     e0a:	2e 85       	ldd	r18, Y+14	; 0x0e
     e0c:	3f 85       	ldd	r19, Y+15	; 0x0f
     e0e:	29 31       	cpi	r18, 0x19	; 25
     e10:	31 05       	cpc	r19, r1
     e12:	29 f0       	breq	.+10     	; 0xe1e <main+0x2d8>
     e14:	b4 ce       	rjmp	.-664    	; 0xb7e <main+0x38>
				case CORRECT_PASS_COMMAND:
					failTrials=0;
     e16:	10 92 0e 01 	sts	0x010E, r1
					currentMenu = MENU_CREATE_PASS;
     e1a:	19 82       	std	Y+1, r1	; 0x01
     e1c:	b0 ce       	rjmp	.-672    	; 0xb7e <main+0x38>
					break;
				case WRONG_PASS_COMMAND:
					failTrials++;
     e1e:	80 91 0e 01 	lds	r24, 0x010E
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 0e 01 	sts	0x010E, r24
     e28:	aa ce       	rjmp	.-684    	; 0xb7e <main+0x38>

00000e2a <checkPass>:
	}
	return 0;
}


uint8 checkPass(const uint8 * pass,const uint8 * confirmPass){
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <checkPass+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <checkPass+0x8>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <checkPass+0xa>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9c 83       	std	Y+4, r25	; 0x04
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	7e 83       	std	Y+6, r23	; 0x06
     e3e:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i;
	uint8 matchFlag;
	for(i=0;i<PASSWORD_SIZE;i++){
     e40:	1a 82       	std	Y+2, r1	; 0x02
     e42:	1b c0       	rjmp	.+54     	; 0xe7a <checkPass+0x50>
		if(pass[i]!=confirmPass[i]){
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	fc 01       	movw	r30, r24
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	40 81       	ld	r20, Z
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	fc 01       	movw	r30, r24
     e62:	e2 0f       	add	r30, r18
     e64:	f3 1f       	adc	r31, r19
     e66:	80 81       	ld	r24, Z
     e68:	48 17       	cp	r20, r24
     e6a:	11 f0       	breq	.+4      	; 0xe70 <checkPass+0x46>
			matchFlag = NOT_MATCH;
     e6c:	19 82       	std	Y+1, r1	; 0x01
     e6e:	08 c0       	rjmp	.+16     	; 0xe80 <checkPass+0x56>
			break;
		}
		else
			matchFlag = MATCH;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	89 83       	std	Y+1, r24	; 0x01


uint8 checkPass(const uint8 * pass,const uint8 * confirmPass){
	uint8 i;
	uint8 matchFlag;
	for(i=0;i<PASSWORD_SIZE;i++){
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	8a 83       	std	Y+2, r24	; 0x02
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	86 30       	cpi	r24, 0x06	; 6
     e7e:	10 f3       	brcs	.-60     	; 0xe44 <checkPass+0x1a>
			break;
		}
		else
			matchFlag = MATCH;
				}
	return matchFlag;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
}
     e82:	26 96       	adiw	r28, 0x06	; 6
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <insertPass>:


void insertPass(uint8 * pass){
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	6f 97       	sbiw	r28, 0x1f	; 31
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	9f 8f       	std	Y+31, r25	; 0x1f
     eae:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
     eb0:	1d 8e       	std	Y+29, r1	; 0x1d
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a8 ec       	ldi	r26, 0xC8	; 200
     eb8:	b3 e4       	ldi	r27, 0x43	; 67
     eba:	89 8f       	std	Y+25, r24	; 0x19
     ebc:	9a 8f       	std	Y+26, r25	; 0x1a
     ebe:	ab 8f       	std	Y+27, r26	; 0x1b
     ec0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec2:	69 8d       	ldd	r22, Y+25	; 0x19
     ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	4a ef       	ldi	r20, 0xFA	; 250
     ed0:	54 e4       	ldi	r21, 0x44	; 68
     ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	8d 8b       	std	Y+21, r24	; 0x15
     edc:	9e 8b       	std	Y+22, r25	; 0x16
     ede:	af 8b       	std	Y+23, r26	; 0x17
     ee0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e8       	ldi	r20, 0x80	; 128
     ef0:	5f e3       	ldi	r21, 0x3F	; 63
     ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ef6:	88 23       	and	r24, r24
     ef8:	2c f4       	brge	.+10     	; 0xf04 <insertPass+0x70>
		__ticks = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9c 8b       	std	Y+20, r25	; 0x14
     f00:	8b 8b       	std	Y+19, r24	; 0x13
     f02:	3f c0       	rjmp	.+126    	; 0xf82 <insertPass+0xee>
	else if (__tmp > 65535)
     f04:	6d 89       	ldd	r22, Y+21	; 0x15
     f06:	7e 89       	ldd	r23, Y+22	; 0x16
     f08:	8f 89       	ldd	r24, Y+23	; 0x17
     f0a:	98 8d       	ldd	r25, Y+24	; 0x18
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	57 e4       	ldi	r21, 0x47	; 71
     f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f18:	18 16       	cp	r1, r24
     f1a:	4c f5       	brge	.+82     	; 0xf6e <insertPass+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f1c:	69 8d       	ldd	r22, Y+25	; 0x19
     f1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e2       	ldi	r20, 0x20	; 32
     f2a:	51 e4       	ldi	r21, 0x41	; 65
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	9c 8b       	std	Y+20, r25	; 0x14
     f42:	8b 8b       	std	Y+19, r24	; 0x13
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <insertPass+0xd0>
     f46:	88 ec       	ldi	r24, 0xC8	; 200
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9a 8b       	std	Y+18, r25	; 0x12
     f4c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f4e:	89 89       	ldd	r24, Y+17	; 0x11
     f50:	9a 89       	ldd	r25, Y+18	; 0x12
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <insertPass+0xbe>
     f56:	9a 8b       	std	Y+18, r25	; 0x12
     f58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	9c 8b       	std	Y+20, r25	; 0x14
     f62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f64:	8b 89       	ldd	r24, Y+19	; 0x13
     f66:	9c 89       	ldd	r25, Y+20	; 0x14
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	69 f7       	brne	.-38     	; 0xf46 <insertPass+0xb2>
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <insertPass+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6e:	6d 89       	ldd	r22, Y+21	; 0x15
     f70:	7e 89       	ldd	r23, Y+22	; 0x16
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	98 8d       	ldd	r25, Y+24	; 0x18
     f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9c 8b       	std	Y+20, r25	; 0x14
     f80:	8b 8b       	std	Y+19, r24	; 0x13
     f82:	8b 89       	ldd	r24, Y+19	; 0x13
     f84:	9c 89       	ldd	r25, Y+20	; 0x14
     f86:	98 8b       	std	Y+16, r25	; 0x10
     f88:	8f 87       	std	Y+15, r24	; 0x0f
     f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f8c:	98 89       	ldd	r25, Y+16	; 0x10
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <insertPass+0xfa>
     f92:	98 8b       	std	Y+16, r25	; 0x10
     f94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	pass[i]= KEYPAD_getPressedKey();
     f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa0:	8c 01       	movw	r16, r24
     fa2:	02 0f       	add	r16, r18
     fa4:	13 1f       	adc	r17, r19
     fa6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <KEYPAD_getPressedKey>
     faa:	f8 01       	movw	r30, r16
     fac:	80 83       	st	Z, r24
	LCD_displayCharacter('*');
     fae:	8a e2       	ldi	r24, 0x2A	; 42
     fb0:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_displayCharacter>
     fb4:	84 c0       	rjmp	.+264    	; 0x10be <insertPass+0x22a>
//	LCD_intgerToString(pass[i]);
	while(pass[i] != ENTER_KEY){
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a8 ec       	ldi	r26, 0xC8	; 200
     fbc:	b3 e4       	ldi	r27, 0x43	; 67
     fbe:	8b 87       	std	Y+11, r24	; 0x0b
     fc0:	9c 87       	std	Y+12, r25	; 0x0c
     fc2:	ad 87       	std	Y+13, r26	; 0x0d
     fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a ef       	ldi	r20, 0xFA	; 250
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8f 83       	std	Y+7, r24	; 0x07
     fe0:	98 87       	std	Y+8, r25	; 0x08
     fe2:	a9 87       	std	Y+9, r26	; 0x09
     fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <insertPass+0x174>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <insertPass+0x1f2>
	else if (__tmp > 65535)
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <insertPass+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6b 85       	ldd	r22, Y+11	; 0x0b
    1022:	7c 85       	ldd	r23, Y+12	; 0x0c
    1024:	8d 85       	ldd	r24, Y+13	; 0x0d
    1026:	9e 85       	ldd	r25, Y+14	; 0x0e
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <insertPass+0x1d4>
    104a:	88 ec       	ldi	r24, 0xC8	; 200
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <insertPass+0x1c2>
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <insertPass+0x1b6>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <insertPass+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <insertPass+0x1fe>
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(400);
		i++;
    109a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	8d 8f       	std	Y+29, r24	; 0x1d
		pass[i]= KEYPAD_getPressedKey();
    10a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10aa:	8c 01       	movw	r16, r24
    10ac:	02 0f       	add	r16, r18
    10ae:	13 1f       	adc	r17, r19
    10b0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <KEYPAD_getPressedKey>
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    10b8:	8a e2       	ldi	r24, 0x2A	; 42
    10ba:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_displayCharacter>
	uint8 i=0;
	_delay_ms(400);
	pass[i]= KEYPAD_getPressedKey();
	LCD_displayCharacter('*');
//	LCD_intgerToString(pass[i]);
	while(pass[i] != ENTER_KEY){
    10be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	80 81       	ld	r24, Z
    10d0:	8d 33       	cpi	r24, 0x3D	; 61
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <insertPass+0x242>
    10d4:	70 cf       	rjmp	.-288    	; 0xfb6 <insertPass+0x122>
		i++;
		pass[i]= KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
//		LCD_intgerToString(pass[i]);
	}
	pass[i]='#';
    10d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	83 e2       	ldi	r24, 0x23	; 35
    10e8:	80 83       	st	Z, r24
}
    10ea:	6f 96       	adiw	r28, 0x1f	; 31
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	08 95       	ret

00001100 <App_TickProcessing>:
void App_TickProcessing(void){
    1100:	df 93       	push	r29
    1102:	cf 93       	push	r28
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
g_sec++;
    1108:	80 91 0f 01 	lds	r24, 0x010F
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	80 93 0f 01 	sts	0x010F, r24
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <GPIO_setupPinDirection+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_setupPinDirection+0x8>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
    112a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <GPIO_setupPinDirection+0x1c>
    1132:	d5 c0       	rjmp	.+426    	; 0x12de <GPIO_setupPinDirection+0x1c6>
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_setupPinDirection+0x24>
    113a:	d1 c0       	rjmp	.+418    	; 0x12de <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <GPIO_setupPinDirection+0x3a>
    1150:	43 c0       	rjmp	.+134    	; 0x11d8 <GPIO_setupPinDirection+0xc0>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <GPIO_setupPinDirection+0x4e>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	71 f0       	breq	.+28     	; 0x1180 <GPIO_setupPinDirection+0x68>
    1164:	bc c0       	rjmp	.+376    	; 0x12de <GPIO_setupPinDirection+0x1c6>
    1166:	2c 81       	ldd	r18, Y+4	; 0x04
    1168:	3d 81       	ldd	r19, Y+5	; 0x05
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <GPIO_setupPinDirection+0x5a>
    1170:	5f c0       	rjmp	.+190    	; 0x1230 <GPIO_setupPinDirection+0x118>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <GPIO_setupPinDirection+0x66>
    117c:	85 c0       	rjmp	.+266    	; 0x1288 <GPIO_setupPinDirection+0x170>
    117e:	af c0       	rjmp	.+350    	; 0x12de <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	a1 f4       	brne	.+40     	; 0x11ae <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1186:	aa e3       	ldi	r26, 0x3A	; 58
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_setupPinDirection+0x8c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_setupPinDirection+0x88>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	98 c0       	rjmp	.+304    	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11ae:	aa e3       	ldi	r26, 0x3A	; 58
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	ea e3       	ldi	r30, 0x3A	; 58
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_setupPinDirection+0xb4>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_setupPinDirection+0xb0>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	83 c0       	rjmp	.+262    	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11de:	a7 e3       	ldi	r26, 0x37	; 55
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e7 e3       	ldi	r30, 0x37	; 55
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <GPIO_setupPinDirection+0xe4>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <GPIO_setupPinDirection+0xe0>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	6c c0       	rjmp	.+216    	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1206:	a7 e3       	ldi	r26, 0x37	; 55
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e7 e3       	ldi	r30, 0x37	; 55
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_setupPinDirection+0x10c>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_setupPinDirection+0x108>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	57 c0       	rjmp	.+174    	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	a1 f4       	brne	.+40     	; 0x125e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1236:	a4 e3       	ldi	r26, 0x34	; 52
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e4 e3       	ldi	r30, 0x34	; 52
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_setupPinDirection+0x13c>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_setupPinDirection+0x138>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	40 c0       	rjmp	.+128    	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    125e:	a4 e3       	ldi	r26, 0x34	; 52
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_setupPinDirection+0x164>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_setupPinDirection+0x160>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	2b c0       	rjmp	.+86     	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	a1 f4       	brne	.+40     	; 0x12b6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    128e:	a1 e3       	ldi	r26, 0x31	; 49
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e1 e3       	ldi	r30, 0x31	; 49
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <GPIO_setupPinDirection+0x194>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <GPIO_setupPinDirection+0x190>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12b6:	a1 e3       	ldi	r26, 0x31	; 49
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_setupPinDirection+0x1bc>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_setupPinDirection+0x1b8>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <GPIO_writePin+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_writePin+0x8>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	6a 83       	std	Y+2, r22	; 0x02
    1300:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	88 30       	cpi	r24, 0x08	; 8
    1306:	08 f0       	brcs	.+2      	; 0x130a <GPIO_writePin+0x1c>
    1308:	d5 c0       	rjmp	.+426    	; 0x14b4 <GPIO_writePin+0x1c6>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	08 f0       	brcs	.+2      	; 0x1312 <GPIO_writePin+0x24>
    1310:	d1 c0       	rjmp	.+418    	; 0x14b4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	09 f4       	brne	.+2      	; 0x1328 <GPIO_writePin+0x3a>
    1326:	43 c0       	rjmp	.+134    	; 0x13ae <GPIO_writePin+0xc0>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	2c f4       	brge	.+10     	; 0x133c <GPIO_writePin+0x4e>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	71 f0       	breq	.+28     	; 0x1356 <GPIO_writePin+0x68>
    133a:	bc c0       	rjmp	.+376    	; 0x14b4 <GPIO_writePin+0x1c6>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <GPIO_writePin+0x5a>
    1346:	5f c0       	rjmp	.+190    	; 0x1406 <GPIO_writePin+0x118>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <GPIO_writePin+0x66>
    1352:	85 c0       	rjmp	.+266    	; 0x145e <GPIO_writePin+0x170>
    1354:	af c0       	rjmp	.+350    	; 0x14b4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	a1 f4       	brne	.+40     	; 0x1384 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_writePin+0x8c>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_writePin+0x88>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	98 c0       	rjmp	.+304    	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_writePin+0xb4>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_writePin+0xb0>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	83 c0       	rjmp	.+262    	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a1 f4       	brne	.+40     	; 0x13dc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13b4:	a8 e3       	ldi	r26, 0x38	; 56
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e3       	ldi	r30, 0x38	; 56
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_writePin+0xe4>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_writePin+0xe0>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	6c c0       	rjmp	.+216    	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13dc:	a8 e3       	ldi	r26, 0x38	; 56
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e3       	ldi	r30, 0x38	; 56
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_writePin+0x10c>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_writePin+0x108>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	57 c0       	rjmp	.+174    	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	a1 f4       	brne	.+40     	; 0x1434 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    140c:	a5 e3       	ldi	r26, 0x35	; 53
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e3       	ldi	r30, 0x35	; 53
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_writePin+0x13c>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_writePin+0x138>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	40 c0       	rjmp	.+128    	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1434:	a5 e3       	ldi	r26, 0x35	; 53
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e3       	ldi	r30, 0x35	; 53
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0x164>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0x160>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	2b c0       	rjmp	.+86     	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	a1 f4       	brne	.+40     	; 0x148c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1464:	a2 e3       	ldi	r26, 0x32	; 50
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e2 e3       	ldi	r30, 0x32	; 50
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_writePin+0x194>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_writePin+0x190>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	14 c0       	rjmp	.+40     	; 0x14b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    148c:	a2 e3       	ldi	r26, 0x32	; 50
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e2 e3       	ldi	r30, 0x32	; 50
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <GPIO_writePin+0x1bc>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <GPIO_writePin+0x1b8>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <GPIO_readPin+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <GPIO_readPin+0x8>
    14cc:	0f 92       	push	r0
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    14d6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <GPIO_readPin+0x1c>
    14de:	84 c0       	rjmp	.+264    	; 0x15e8 <GPIO_readPin+0x124>
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <GPIO_readPin+0x24>
    14e6:	80 c0       	rjmp	.+256    	; 0x15e8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	3d 83       	std	Y+5, r19	; 0x05
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	4c 81       	ldd	r20, Y+4	; 0x04
    14f4:	5d 81       	ldd	r21, Y+5	; 0x05
    14f6:	41 30       	cpi	r20, 0x01	; 1
    14f8:	51 05       	cpc	r21, r1
    14fa:	79 f1       	breq	.+94     	; 0x155a <GPIO_readPin+0x96>
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	91 05       	cpc	r25, r1
    1504:	34 f4       	brge	.+12     	; 0x1512 <GPIO_readPin+0x4e>
    1506:	2c 81       	ldd	r18, Y+4	; 0x04
    1508:	3d 81       	ldd	r19, Y+5	; 0x05
    150a:	21 15       	cp	r18, r1
    150c:	31 05       	cpc	r19, r1
    150e:	69 f0       	breq	.+26     	; 0x152a <GPIO_readPin+0x66>
    1510:	6b c0       	rjmp	.+214    	; 0x15e8 <GPIO_readPin+0x124>
    1512:	4c 81       	ldd	r20, Y+4	; 0x04
    1514:	5d 81       	ldd	r21, Y+5	; 0x05
    1516:	42 30       	cpi	r20, 0x02	; 2
    1518:	51 05       	cpc	r21, r1
    151a:	b9 f1       	breq	.+110    	; 0x158a <GPIO_readPin+0xc6>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <GPIO_readPin+0x64>
    1526:	49 c0       	rjmp	.+146    	; 0x15ba <GPIO_readPin+0xf6>
    1528:	5f c0       	rjmp	.+190    	; 0x15e8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    152a:	e9 e3       	ldi	r30, 0x39	; 57
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	a9 01       	movw	r20, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <GPIO_readPin+0x7e>
    153e:	55 95       	asr	r21
    1540:	47 95       	ror	r20
    1542:	8a 95       	dec	r24
    1544:	e2 f7       	brpl	.-8      	; 0x153e <GPIO_readPin+0x7a>
    1546:	ca 01       	movw	r24, r20
    1548:	81 70       	andi	r24, 0x01	; 1
    154a:	90 70       	andi	r25, 0x00	; 0
    154c:	88 23       	and	r24, r24
    154e:	19 f0       	breq	.+6      	; 0x1556 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	49 c0       	rjmp	.+146    	; 0x15e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1556:	19 82       	std	Y+1, r1	; 0x01
    1558:	47 c0       	rjmp	.+142    	; 0x15e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    155a:	e6 e3       	ldi	r30, 0x36	; 54
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a9 01       	movw	r20, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <GPIO_readPin+0xae>
    156e:	55 95       	asr	r21
    1570:	47 95       	ror	r20
    1572:	8a 95       	dec	r24
    1574:	e2 f7       	brpl	.-8      	; 0x156e <GPIO_readPin+0xaa>
    1576:	ca 01       	movw	r24, r20
    1578:	81 70       	andi	r24, 0x01	; 1
    157a:	90 70       	andi	r25, 0x00	; 0
    157c:	88 23       	and	r24, r24
    157e:	19 f0       	breq	.+6      	; 0x1586 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	31 c0       	rjmp	.+98     	; 0x15e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1586:	19 82       	std	Y+1, r1	; 0x01
    1588:	2f c0       	rjmp	.+94     	; 0x15e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    158a:	e3 e3       	ldi	r30, 0x33	; 51
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GPIO_readPin+0xde>
    159e:	55 95       	asr	r21
    15a0:	47 95       	ror	r20
    15a2:	8a 95       	dec	r24
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GPIO_readPin+0xda>
    15a6:	ca 01       	movw	r24, r20
    15a8:	81 70       	andi	r24, 0x01	; 1
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	88 23       	and	r24, r24
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	19 c0       	rjmp	.+50     	; 0x15e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15b6:	19 82       	std	Y+1, r1	; 0x01
    15b8:	17 c0       	rjmp	.+46     	; 0x15e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15ba:	e0 e3       	ldi	r30, 0x30	; 48
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_readPin+0x10e>
    15ce:	55 95       	asr	r21
    15d0:	47 95       	ror	r20
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_readPin+0x10a>
    15d6:	ca 01       	movw	r24, r20
    15d8:	81 70       	andi	r24, 0x01	; 1
    15da:	90 70       	andi	r25, 0x00	; 0
    15dc:	88 23       	and	r24, r24
    15de:	19 f0       	breq	.+6      	; 0x15e6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <GPIO_setupPortDirection+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <GPIO_setupPortDirection+0x8>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	84 30       	cpi	r24, 0x04	; 4
    160e:	90 f5       	brcc	.+100    	; 0x1674 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	3c 83       	std	Y+4, r19	; 0x04
    1618:	2b 83       	std	Y+3, r18	; 0x03
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	d1 f0       	breq	.+52     	; 0x1658 <GPIO_setupPortDirection+0x5e>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	2c f4       	brge	.+10     	; 0x1638 <GPIO_setupPortDirection+0x3e>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	61 f0       	breq	.+24     	; 0x164e <GPIO_setupPortDirection+0x54>
    1636:	1e c0       	rjmp	.+60     	; 0x1674 <GPIO_setupPortDirection+0x7a>
    1638:	2b 81       	ldd	r18, Y+3	; 0x03
    163a:	3c 81       	ldd	r19, Y+4	; 0x04
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	81 f0       	breq	.+32     	; 0x1662 <GPIO_setupPortDirection+0x68>
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	81 f0       	breq	.+32     	; 0x166c <GPIO_setupPortDirection+0x72>
    164c:	13 c0       	rjmp	.+38     	; 0x1674 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    164e:	ea e3       	ldi	r30, 0x3A	; 58
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	80 83       	st	Z, r24
    1656:	0e c0       	rjmp	.+28     	; 0x1674 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1658:	e7 e3       	ldi	r30, 0x37	; 55
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	80 83       	st	Z, r24
    1660:	09 c0       	rjmp	.+18     	; 0x1674 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1662:	e4 e3       	ldi	r30, 0x34	; 52
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	80 83       	st	Z, r24
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    166c:	e1 e3       	ldi	r30, 0x31	; 49
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	80 83       	st	Z, r24
			break;
		}
	}
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <GPIO_writePort+0x6>
    1688:	00 d0       	rcall	.+0      	; 0x168a <GPIO_writePort+0x8>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	90 f5       	brcc	.+100    	; 0x16fc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3c 83       	std	Y+4, r19	; 0x04
    16a0:	2b 83       	std	Y+3, r18	; 0x03
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	d1 f0       	breq	.+52     	; 0x16e0 <GPIO_writePort+0x5e>
    16ac:	2b 81       	ldd	r18, Y+3	; 0x03
    16ae:	3c 81       	ldd	r19, Y+4	; 0x04
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <GPIO_writePort+0x3e>
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <GPIO_writePort+0x54>
    16be:	1e c0       	rjmp	.+60     	; 0x16fc <GPIO_writePort+0x7a>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	81 f0       	breq	.+32     	; 0x16ea <GPIO_writePort+0x68>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	81 f0       	breq	.+32     	; 0x16f4 <GPIO_writePort+0x72>
    16d4:	13 c0       	rjmp	.+38     	; 0x16fc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    16d6:	eb e3       	ldi	r30, 0x3B	; 59
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	80 83       	st	Z, r24
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    16e0:	e8 e3       	ldi	r30, 0x38	; 56
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	80 83       	st	Z, r24
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16ea:	e5 e3       	ldi	r30, 0x35	; 53
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	80 83       	st	Z, r24
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16f4:	e2 e3       	ldi	r30, 0x32	; 50
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <GPIO_readPort+0x6>
    1710:	00 d0       	rcall	.+0      	; 0x1712 <GPIO_readPort+0x8>
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1718:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	84 30       	cpi	r24, 0x04	; 4
    171e:	90 f5       	brcc	.+100    	; 0x1784 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	3c 83       	std	Y+4, r19	; 0x04
    1728:	2b 83       	std	Y+3, r18	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	d1 f0       	breq	.+52     	; 0x1768 <GPIO_readPort+0x5e>
    1734:	2b 81       	ldd	r18, Y+3	; 0x03
    1736:	3c 81       	ldd	r19, Y+4	; 0x04
    1738:	22 30       	cpi	r18, 0x02	; 2
    173a:	31 05       	cpc	r19, r1
    173c:	2c f4       	brge	.+10     	; 0x1748 <GPIO_readPort+0x3e>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	61 f0       	breq	.+24     	; 0x175e <GPIO_readPort+0x54>
    1746:	1e c0       	rjmp	.+60     	; 0x1784 <GPIO_readPort+0x7a>
    1748:	2b 81       	ldd	r18, Y+3	; 0x03
    174a:	3c 81       	ldd	r19, Y+4	; 0x04
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	81 f0       	breq	.+32     	; 0x1772 <GPIO_readPort+0x68>
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	9c 81       	ldd	r25, Y+4	; 0x04
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	81 f0       	breq	.+32     	; 0x177c <GPIO_readPort+0x72>
    175c:	13 c0       	rjmp	.+38     	; 0x1784 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    175e:	e9 e3       	ldi	r30, 0x39	; 57
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	0e c0       	rjmp	.+28     	; 0x1784 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1768:	e6 e3       	ldi	r30, 0x36	; 54
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1772:	e3 e3       	ldi	r30, 0x33	; 51
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    177c:	e0 e3       	ldi	r30, 0x30	; 48
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <KEYPAD_getPressedKey+0x6>
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	63 e0       	ldi	r22, 0x03	; 3
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	64 e0       	ldi	r22, 0x04	; 4
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	65 e0       	ldi	r22, 0x05	; 5
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	66 e0       	ldi	r22, 0x06	; 6
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	67 e0       	ldi	r22, 0x07	; 7
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    17ee:	19 82       	std	Y+1, r1	; 0x01
    17f0:	35 c0       	rjmp	.+106    	; 0x185c <KEYPAD_getPressedKey+0xc8>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	69 81       	ldd	r22, Y+1	; 0x01
    17f6:	41 e0       	ldi	r20, 0x01	; 1
    17f8:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	69 81       	ldd	r22, Y+1	; 0x01
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1806:	1a 82       	std	Y+2, r1	; 0x02
    1808:	1e c0       	rjmp	.+60     	; 0x1846 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	98 2f       	mov	r25, r24
    180e:	9c 5f       	subi	r25, 0xFC	; 252
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	69 2f       	mov	r22, r25
    1814:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <GPIO_readPin>
    1818:	88 23       	and	r24, r24
    181a:	91 f4       	brne	.+36     	; 0x1840 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	98 2f       	mov	r25, r24
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	89 0f       	add	r24, r25
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	0e 94 32 0c 	call	0x1864	; 0x1864 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	84 30       	cpi	r24, 0x04	; 4
    184a:	f8 f2       	brcs	.-66     	; 0x180a <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	69 81       	ldd	r22, Y+1	; 0x01
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	40 f2       	brcs	.-112    	; 0x17f2 <KEYPAD_getPressedKey+0x5e>
    1862:	c5 cf       	rjmp	.-118    	; 0x17ee <KEYPAD_getPressedKey+0x5a>

00001864 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <KEYPAD_4x4_adjustKeyNumber+0x6>
    186a:	00 d0       	rcall	.+0      	; 0x186c <KEYPAD_4x4_adjustKeyNumber+0x8>
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1872:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3c 83       	std	Y+4, r19	; 0x04
    187c:	2b 83       	std	Y+3, r18	; 0x03
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	88 30       	cpi	r24, 0x08	; 8
    1884:	91 05       	cpc	r25, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1888:	70 c0       	rjmp	.+224    	; 0x196a <KEYPAD_4x4_adjustKeyNumber+0x106>
    188a:	2b 81       	ldd	r18, Y+3	; 0x03
    188c:	3c 81       	ldd	r19, Y+4	; 0x04
    188e:	29 30       	cpi	r18, 0x09	; 9
    1890:	31 05       	cpc	r19, r1
    1892:	5c f5       	brge	.+86     	; 0x18ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    189e:	59 c0       	rjmp	.+178    	; 0x1952 <KEYPAD_4x4_adjustKeyNumber+0xee>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	25 30       	cpi	r18, 0x05	; 5
    18a6:	31 05       	cpc	r19, r1
    18a8:	9c f4       	brge	.+38     	; 0x18d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	82 30       	cpi	r24, 0x02	; 2
    18b0:	91 05       	cpc	r25, r1
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    18b4:	48 c0       	rjmp	.+144    	; 0x1946 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ba:	23 30       	cpi	r18, 0x03	; 3
    18bc:	31 05       	cpc	r19, r1
    18be:	0c f0       	brlt	.+2      	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    18c0:	45 c0       	rjmp	.+138    	; 0x194c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    18cc:	39 c0       	rjmp	.+114    	; 0x1940 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    18ce:	67 c0       	rjmp	.+206    	; 0x199e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    18d0:	2b 81       	ldd	r18, Y+3	; 0x03
    18d2:	3c 81       	ldd	r19, Y+4	; 0x04
    18d4:	26 30       	cpi	r18, 0x06	; 6
    18d6:	31 05       	cpc	r19, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    18da:	41 c0       	rjmp	.+130    	; 0x195e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	87 30       	cpi	r24, 0x07	; 7
    18e2:	91 05       	cpc	r25, r1
    18e4:	0c f0       	brlt	.+2      	; 0x18e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    18e6:	3e c0       	rjmp	.+124    	; 0x1964 <KEYPAD_4x4_adjustKeyNumber+0x100>
    18e8:	37 c0       	rjmp	.+110    	; 0x1958 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    18ea:	2b 81       	ldd	r18, Y+3	; 0x03
    18ec:	3c 81       	ldd	r19, Y+4	; 0x04
    18ee:	2c 30       	cpi	r18, 0x0C	; 12
    18f0:	31 05       	cpc	r19, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    18f4:	46 c0       	rjmp	.+140    	; 0x1982 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	8d 30       	cpi	r24, 0x0D	; 13
    18fc:	91 05       	cpc	r25, r1
    18fe:	5c f4       	brge	.+22     	; 0x1916 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	2a 30       	cpi	r18, 0x0A	; 10
    1906:	31 05       	cpc	r19, r1
    1908:	b1 f1       	breq	.+108    	; 0x1976 <KEYPAD_4x4_adjustKeyNumber+0x112>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	8b 30       	cpi	r24, 0x0B	; 11
    1910:	91 05       	cpc	r25, r1
    1912:	a4 f5       	brge	.+104    	; 0x197c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1914:	2d c0       	rjmp	.+90     	; 0x1970 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1916:	2b 81       	ldd	r18, Y+3	; 0x03
    1918:	3c 81       	ldd	r19, Y+4	; 0x04
    191a:	2e 30       	cpi	r18, 0x0E	; 14
    191c:	31 05       	cpc	r19, r1
    191e:	b9 f1       	breq	.+110    	; 0x198e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	8e 30       	cpi	r24, 0x0E	; 14
    1926:	91 05       	cpc	r25, r1
    1928:	7c f1       	brlt	.+94     	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x124>
    192a:	2b 81       	ldd	r18, Y+3	; 0x03
    192c:	3c 81       	ldd	r19, Y+4	; 0x04
    192e:	2f 30       	cpi	r18, 0x0F	; 15
    1930:	31 05       	cpc	r19, r1
    1932:	79 f1       	breq	.+94     	; 0x1992 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	80 31       	cpi	r24, 0x10	; 16
    193a:	91 05       	cpc	r25, r1
    193c:	69 f1       	breq	.+90     	; 0x1998 <KEYPAD_4x4_adjustKeyNumber+0x134>
    193e:	2f c0       	rjmp	.+94     	; 0x199e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1940:	87 e0       	ldi	r24, 0x07	; 7
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	2e c0       	rjmp	.+92     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1946:	88 e0       	ldi	r24, 0x08	; 8
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	2b c0       	rjmp	.+86     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    194c:	89 e0       	ldi	r24, 0x09	; 9
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	28 c0       	rjmp	.+80     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1952:	85 e2       	ldi	r24, 0x25	; 37
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	25 c0       	rjmp	.+74     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1958:	84 e0       	ldi	r24, 0x04	; 4
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	22 c0       	rjmp	.+68     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    195e:	85 e0       	ldi	r24, 0x05	; 5
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	1f c0       	rjmp	.+62     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1964:	86 e0       	ldi	r24, 0x06	; 6
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	1c c0       	rjmp	.+56     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    196a:	8a e2       	ldi	r24, 0x2A	; 42
    196c:	89 83       	std	Y+1, r24	; 0x01
    196e:	19 c0       	rjmp	.+50     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	16 c0       	rjmp	.+44     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	13 c0       	rjmp	.+38     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	10 c0       	rjmp	.+32     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1982:	8d e2       	ldi	r24, 0x2D	; 45
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	0d c0       	rjmp	.+26     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1988:	8d e0       	ldi	r24, 0x0D	; 13
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	0a c0       	rjmp	.+20     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	08 c0       	rjmp	.+16     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1992:	8d e3       	ldi	r24, 0x3D	; 61
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1998:	8b e2       	ldi	r24, 0x2B	; 43
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	2e 97       	sbiw	r28, 0x0e	; 14
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	65 e0       	ldi	r22, 0x05	; 5
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	64 e0       	ldi	r22, 0x04	; 4
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 ea       	ldi	r26, 0xA0	; 160
    19e0:	b1 e4       	ldi	r27, 0x41	; 65
    19e2:	8b 87       	std	Y+11, r24	; 0x0b
    19e4:	9c 87       	std	Y+12, r25	; 0x0c
    19e6:	ad 87       	std	Y+13, r26	; 0x0d
    19e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a ef       	ldi	r20, 0xFA	; 250
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8f 83       	std	Y+7, r24	; 0x07
    1a04:	98 87       	std	Y+8, r25	; 0x08
    1a06:	a9 87       	std	Y+9, r26	; 0x09
    1a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	2c f4       	brge	.+10     	; 0x1a2c <LCD_init+0x7a>
		__ticks = 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	3f c0       	rjmp	.+126    	; 0x1aaa <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	4f e7       	ldi	r20, 0x7F	; 127
    1a3a:	57 e4       	ldi	r21, 0x47	; 71
    1a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a40:	18 16       	cp	r1, r24
    1a42:	4c f5       	brge	.+82     	; 0x1a96 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	51 e4       	ldi	r21, 0x41	; 65
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <LCD_init+0xda>
    1a6e:	88 ec       	ldi	r24, 0xC8	; 200
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	9c 83       	std	Y+4, r25	; 0x04
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <LCD_init+0xc8>
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	9e 83       	std	Y+6, r25	; 0x06
    1a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <LCD_init+0xbc>
    1a94:	14 c0       	rjmp	.+40     	; 0x1abe <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_init+0x104>
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	63 e0       	ldi	r22, 0x03	; 3
    1ac2:	41 e0       	ldi	r20, 0x01	; 1
    1ac4:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	41 e0       	ldi	r20, 0x01	; 1
    1ad8:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1ae6:	83 e3       	ldi	r24, 0x33	; 51
    1ae8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1aec:	82 e3       	ldi	r24, 0x32	; 50
    1aee:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1af2:	88 e2       	ldi	r24, 0x28	; 40
    1af4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1af8:	8c e0       	ldi	r24, 0x0C	; 12
    1afa:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>
}
    1b04:	2e 96       	adiw	r28, 0x0e	; 14
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	c3 56       	subi	r28, 0x63	; 99
    1b24:	d0 40       	sbci	r29, 0x00	; 0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	fe 01       	movw	r30, r28
    1b32:	ed 59       	subi	r30, 0x9D	; 157
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	65 e0       	ldi	r22, 0x05	; 5
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    1b42:	fe 01       	movw	r30, r28
    1b44:	e1 5a       	subi	r30, 0xA1	; 161
    1b46:	ff 4f       	sbci	r31, 0xFF	; 255
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	80 83       	st	Z, r24
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	a2 83       	std	Z+2, r26	; 0x02
    1b56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	8e 01       	movw	r16, r28
    1b5a:	05 5a       	subi	r16, 0xA5	; 165
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e1 5a       	subi	r30, 0xA1	; 161
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a ef       	ldi	r20, 0xFA	; 250
    1b72:	54 e4       	ldi	r21, 0x44	; 68
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 83       	st	Z, r24
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	a2 83       	std	Z+2, r26	; 0x02
    1b84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b86:	fe 01       	movw	r30, r28
    1b88:	e5 5a       	subi	r30, 0xA5	; 165
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	44 f4       	brge	.+16     	; 0x1bb4 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e7 5a       	subi	r30, 0xA7	; 167
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
    1bb2:	64 c0       	rjmp	.+200    	; 0x1c7c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e5 5a       	subi	r30, 0xA5	; 165
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	60 81       	ld	r22, Z
    1bbc:	71 81       	ldd	r23, Z+1	; 0x01
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	0c f0       	brlt	.+2      	; 0x1bd4 <LCD_sendCommand+0xbe>
    1bd2:	43 c0       	rjmp	.+134    	; 0x1c5a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e1 5a       	subi	r30, 0xA1	; 161
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8e 01       	movw	r16, r28
    1bf4:	07 5a       	subi	r16, 0xA7	; 167
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	f8 01       	movw	r30, r16
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	1f c0       	rjmp	.+62     	; 0x1c4a <LCD_sendCommand+0x134>
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e9 5a       	subi	r30, 0xA9	; 169
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	88 ec       	ldi	r24, 0xC8	; 200
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e9 5a       	subi	r30, 0xA9	; 169
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_sendCommand+0x10e>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e9 5a       	subi	r30, 0xA9	; 169
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	de 01       	movw	r26, r28
    1c34:	a7 5a       	subi	r26, 0xA7	; 167
    1c36:	bf 4f       	sbci	r27, 0xFF	; 255
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e7 5a       	subi	r30, 0xA7	; 167
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	80 81       	ld	r24, Z
    1c40:	91 81       	ldd	r25, Z+1	; 0x01
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	9c 93       	st	X, r25
    1c48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5a       	subi	r30, 0xA7	; 167
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	d1 f6       	brne	.-76     	; 0x1c0c <LCD_sendCommand+0xf6>
    1c58:	27 c0       	rjmp	.+78     	; 0x1ca8 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	8e 01       	movw	r16, r28
    1c5c:	07 5a       	subi	r16, 0xA7	; 167
    1c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c60:	fe 01       	movw	r30, r28
    1c62:	e5 5a       	subi	r30, 0xA5	; 165
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	60 81       	ld	r22, Z
    1c68:	71 81       	ldd	r23, Z+1	; 0x01
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	f8 01       	movw	r30, r16
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
    1c7c:	de 01       	movw	r26, r28
    1c7e:	ab 5a       	subi	r26, 0xAB	; 171
    1c80:	bf 4f       	sbci	r27, 0xFF	; 255
    1c82:	fe 01       	movw	r30, r28
    1c84:	e7 5a       	subi	r30, 0xA7	; 167
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 81       	ld	r24, Z
    1c8a:	91 81       	ldd	r25, Z+1	; 0x01
    1c8c:	8d 93       	st	X+, r24
    1c8e:	9c 93       	st	X, r25
    1c90:	fe 01       	movw	r30, r28
    1c92:	eb 5a       	subi	r30, 0xAB	; 171
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_sendCommand+0x184>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	eb 5a       	subi	r30, 0xAB	; 171
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	64 e0       	ldi	r22, 0x04	; 4
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	ef 5a       	subi	r30, 0xAF	; 175
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a0 e8       	ldi	r26, 0x80	; 128
    1cbe:	bf e3       	ldi	r27, 0x3F	; 63
    1cc0:	80 83       	st	Z, r24
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	a2 83       	std	Z+2, r26	; 0x02
    1cc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc8:	8e 01       	movw	r16, r28
    1cca:	03 5b       	subi	r16, 0xB3	; 179
    1ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cce:	fe 01       	movw	r30, r28
    1cd0:	ef 5a       	subi	r30, 0xAF	; 175
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a ef       	ldi	r20, 0xFA	; 250
    1ce2:	54 e4       	ldi	r21, 0x44	; 68
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	f8 01       	movw	r30, r16
    1cee:	80 83       	st	Z, r24
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	a2 83       	std	Z+2, r26	; 0x02
    1cf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e3 5b       	subi	r30, 0xB3	; 179
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e8       	ldi	r20, 0x80	; 128
    1d0a:	5f e3       	ldi	r21, 0x3F	; 63
    1d0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d10:	88 23       	and	r24, r24
    1d12:	44 f4       	brge	.+16     	; 0x1d24 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d14:	fe 01       	movw	r30, r28
    1d16:	e5 5b       	subi	r30, 0xB5	; 181
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    1d22:	64 c0       	rjmp	.+200    	; 0x1dec <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d24:	fe 01       	movw	r30, r28
    1d26:	e3 5b       	subi	r30, 0xB3	; 179
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <LCD_sendCommand+0x22e>
    1d42:	43 c0       	rjmp	.+134    	; 0x1dca <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	fe 01       	movw	r30, r28
    1d46:	ef 5a       	subi	r30, 0xAF	; 175
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8e 01       	movw	r16, r28
    1d64:	05 5b       	subi	r16, 0xB5	; 181
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	f8 01       	movw	r30, r16
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	1f c0       	rjmp	.+62     	; 0x1dba <LCD_sendCommand+0x2a4>
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e7 5b       	subi	r30, 0xB7	; 183
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e7 5b       	subi	r30, 0xB7	; 183
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <LCD_sendCommand+0x27e>
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e7 5b       	subi	r30, 0xB7	; 183
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da2:	de 01       	movw	r26, r28
    1da4:	a5 5b       	subi	r26, 0xB5	; 181
    1da6:	bf 4f       	sbci	r27, 0xFF	; 255
    1da8:	fe 01       	movw	r30, r28
    1daa:	e5 5b       	subi	r30, 0xB5	; 181
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 81       	ld	r24, Z
    1db0:	91 81       	ldd	r25, Z+1	; 0x01
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	11 96       	adiw	r26, 0x01	; 1
    1db6:	9c 93       	st	X, r25
    1db8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e5 5b       	subi	r30, 0xB5	; 181
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	91 81       	ldd	r25, Z+1	; 0x01
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	d1 f6       	brne	.-76     	; 0x1d7c <LCD_sendCommand+0x266>
    1dc8:	27 c0       	rjmp	.+78     	; 0x1e18 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	8e 01       	movw	r16, r28
    1dcc:	05 5b       	subi	r16, 0xB5	; 181
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e3 5b       	subi	r30, 0xB3	; 179
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	f8 01       	movw	r30, r16
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
    1dec:	de 01       	movw	r26, r28
    1dee:	a9 5b       	subi	r26, 0xB9	; 185
    1df0:	bf 4f       	sbci	r27, 0xFF	; 255
    1df2:	fe 01       	movw	r30, r28
    1df4:	e5 5b       	subi	r30, 0xB5	; 181
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	8d 93       	st	X+, r24
    1dfe:	9c 93       	st	X, r25
    1e00:	fe 01       	movw	r30, r28
    1e02:	e9 5b       	subi	r30, 0xB9	; 185
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	91 81       	ldd	r25, Z+1	; 0x01
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_sendCommand+0x2f4>
    1e0e:	fe 01       	movw	r30, r28
    1e10:	e9 5b       	subi	r30, 0xB9	; 185
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e18:	fe 01       	movw	r30, r28
    1e1a:	ed 59       	subi	r30, 0x9D	; 157
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	80 71       	andi	r24, 0x10	; 16
    1e26:	90 70       	andi	r25, 0x00	; 0
    1e28:	95 95       	asr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	95 95       	asr	r25
    1e2e:	87 95       	ror	r24
    1e30:	95 95       	asr	r25
    1e32:	87 95       	ror	r24
    1e34:	95 95       	asr	r25
    1e36:	87 95       	ror	r24
    1e38:	98 2f       	mov	r25, r24
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	63 e0       	ldi	r22, 0x03	; 3
    1e3e:	49 2f       	mov	r20, r25
    1e40:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1e44:	fe 01       	movw	r30, r28
    1e46:	ed 59       	subi	r30, 0x9D	; 157
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	80 72       	andi	r24, 0x20	; 32
    1e52:	90 70       	andi	r25, 0x00	; 0
    1e54:	95 95       	asr	r25
    1e56:	87 95       	ror	r24
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	95 95       	asr	r25
    1e66:	87 95       	ror	r24
    1e68:	98 2f       	mov	r25, r24
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	49 2f       	mov	r20, r25
    1e70:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1e74:	fe 01       	movw	r30, r28
    1e76:	ed 59       	subi	r30, 0x9D	; 157
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	80 74       	andi	r24, 0x40	; 64
    1e82:	90 70       	andi	r25, 0x00	; 0
    1e84:	08 2e       	mov	r0, r24
    1e86:	89 2f       	mov	r24, r25
    1e88:	00 0c       	add	r0, r0
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 0b       	sbc	r25, r25
    1e8e:	00 0c       	add	r0, r0
    1e90:	88 1f       	adc	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	98 2f       	mov	r25, r24
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	61 e0       	ldi	r22, 0x01	; 1
    1e9a:	49 2f       	mov	r20, r25
    1e9c:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ed 59       	subi	r30, 0x9D	; 157
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	98 2f       	mov	r25, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	99 27       	eor	r25, r25
    1eae:	99 1f       	adc	r25, r25
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	49 2f       	mov	r20, r25
    1eb6:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	ed 5b       	subi	r30, 0xBD	; 189
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	01 5c       	subi	r16, 0xC1	; 193
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ed 5b       	subi	r30, 0xBD	; 189
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efe:	fe 01       	movw	r30, r28
    1f00:	ff 96       	adiw	r30, 0x3f	; 63
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9e af       	std	Y+62, r25	; 0x3e
    1f20:	8d af       	std	Y+61, r24	; 0x3d
    1f22:	46 c0       	rjmp	.+140    	; 0x1fb0 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f24:	fe 01       	movw	r30, r28
    1f26:	ff 96       	adiw	r30, 0x3f	; 63
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	3f ef       	ldi	r19, 0xFF	; 255
    1f34:	4f e7       	ldi	r20, 0x7F	; 127
    1f36:	57 e4       	ldi	r21, 0x47	; 71
    1f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3c:	18 16       	cp	r1, r24
    1f3e:	64 f5       	brge	.+88     	; 0x1f98 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	fe 01       	movw	r30, r28
    1f42:	ed 5b       	subi	r30, 0xBD	; 189
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	51 e4       	ldi	r21, 0x41	; 65
    1f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9e af       	std	Y+62, r25	; 0x3e
    1f6c:	8d af       	std	Y+61, r24	; 0x3d
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <LCD_sendCommand+0x478>
    1f70:	88 ec       	ldi	r24, 0xC8	; 200
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9c af       	std	Y+60, r25	; 0x3c
    1f76:	8b af       	std	Y+59, r24	; 0x3b
    1f78:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_sendCommand+0x466>
    1f80:	9c af       	std	Y+60, r25	; 0x3c
    1f82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	9e af       	std	Y+62, r25	; 0x3e
    1f8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f90:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	69 f7       	brne	.-38     	; 0x1f70 <LCD_sendCommand+0x45a>
    1f96:	16 c0       	rjmp	.+44     	; 0x1fc4 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ff 96       	adiw	r30, 0x3f	; 63
    1f9c:	60 81       	ld	r22, Z
    1f9e:	71 81       	ldd	r23, Z+1	; 0x01
    1fa0:	82 81       	ldd	r24, Z+2	; 0x02
    1fa2:	93 81       	ldd	r25, Z+3	; 0x03
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e af       	std	Y+62, r25	; 0x3e
    1fae:	8d af       	std	Y+61, r24	; 0x3d
    1fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fb4:	9a af       	std	Y+58, r25	; 0x3a
    1fb6:	89 af       	std	Y+57, r24	; 0x39
    1fb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1fba:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_sendCommand+0x4a6>
    1fc0:	9a af       	std	Y+58, r25	; 0x3a
    1fc2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	64 e0       	ldi	r22, 0x04	; 4
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a0 e8       	ldi	r26, 0x80	; 128
    1fd4:	bf e3       	ldi	r27, 0x3F	; 63
    1fd6:	8d ab       	std	Y+53, r24	; 0x35
    1fd8:	9e ab       	std	Y+54, r25	; 0x36
    1fda:	af ab       	std	Y+55, r26	; 0x37
    1fdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fde:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe0:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe2:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe4:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	4a ef       	ldi	r20, 0xFA	; 250
    1fec:	54 e4       	ldi	r21, 0x44	; 68
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	89 ab       	std	Y+49, r24	; 0x31
    1ff8:	9a ab       	std	Y+50, r25	; 0x32
    1ffa:	ab ab       	std	Y+51, r26	; 0x33
    1ffc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e8       	ldi	r20, 0x80	; 128
    200c:	5f e3       	ldi	r21, 0x3F	; 63
    200e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2012:	88 23       	and	r24, r24
    2014:	2c f4       	brge	.+10     	; 0x2020 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	98 ab       	std	Y+48, r25	; 0x30
    201c:	8f a7       	std	Y+47, r24	; 0x2f
    201e:	3f c0       	rjmp	.+126    	; 0x209e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2020:	69 a9       	ldd	r22, Y+49	; 0x31
    2022:	7a a9       	ldd	r23, Y+50	; 0x32
    2024:	8b a9       	ldd	r24, Y+51	; 0x33
    2026:	9c a9       	ldd	r25, Y+52	; 0x34
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	3f ef       	ldi	r19, 0xFF	; 255
    202c:	4f e7       	ldi	r20, 0x7F	; 127
    202e:	57 e4       	ldi	r21, 0x47	; 71
    2030:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2034:	18 16       	cp	r1, r24
    2036:	4c f5       	brge	.+82     	; 0x208a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	98 ab       	std	Y+48, r25	; 0x30
    205e:	8f a7       	std	Y+47, r24	; 0x2f
    2060:	0f c0       	rjmp	.+30     	; 0x2080 <LCD_sendCommand+0x56a>
    2062:	88 ec       	ldi	r24, 0xC8	; 200
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	9e a7       	std	Y+46, r25	; 0x2e
    2068:	8d a7       	std	Y+45, r24	; 0x2d
    206a:	8d a5       	ldd	r24, Y+45	; 0x2d
    206c:	9e a5       	ldd	r25, Y+46	; 0x2e
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_sendCommand+0x558>
    2072:	9e a7       	std	Y+46, r25	; 0x2e
    2074:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	8f a5       	ldd	r24, Y+47	; 0x2f
    2078:	98 a9       	ldd	r25, Y+48	; 0x30
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	8f a5       	ldd	r24, Y+47	; 0x2f
    2082:	98 a9       	ldd	r25, Y+48	; 0x30
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	69 f7       	brne	.-38     	; 0x2062 <LCD_sendCommand+0x54c>
    2088:	14 c0       	rjmp	.+40     	; 0x20b2 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	98 ab       	std	Y+48, r25	; 0x30
    209c:	8f a7       	std	Y+47, r24	; 0x2f
    209e:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a0:	98 a9       	ldd	r25, Y+48	; 0x30
    20a2:	9c a7       	std	Y+44, r25	; 0x2c
    20a4:	8b a7       	std	Y+43, r24	; 0x2b
    20a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_sendCommand+0x594>
    20ae:	9c a7       	std	Y+44, r25	; 0x2c
    20b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	64 e0       	ldi	r22, 0x04	; 4
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e8       	ldi	r26, 0x80	; 128
    20c2:	bf e3       	ldi	r27, 0x3F	; 63
    20c4:	8f a3       	std	Y+39, r24	; 0x27
    20c6:	98 a7       	std	Y+40, r25	; 0x28
    20c8:	a9 a7       	std	Y+41, r26	; 0x29
    20ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6f a1       	ldd	r22, Y+39	; 0x27
    20ce:	78 a5       	ldd	r23, Y+40	; 0x28
    20d0:	89 a5       	ldd	r24, Y+41	; 0x29
    20d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a ef       	ldi	r20, 0xFA	; 250
    20da:	54 e4       	ldi	r21, 0x44	; 68
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8b a3       	std	Y+35, r24	; 0x23
    20e6:	9c a3       	std	Y+36, r25	; 0x24
    20e8:	ad a3       	std	Y+37, r26	; 0x25
    20ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	3f c0       	rjmp	.+126    	; 0x218c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    210e:	6b a1       	ldd	r22, Y+35	; 0x23
    2110:	7c a1       	ldd	r23, Y+36	; 0x24
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	9e a1       	ldd	r25, Y+38	; 0x26
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6f a1       	ldd	r22, Y+39	; 0x27
    2128:	78 a5       	ldd	r23, Y+40	; 0x28
    212a:	89 a5       	ldd	r24, Y+41	; 0x29
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
    214e:	0f c0       	rjmp	.+30     	; 0x216e <LCD_sendCommand+0x658>
    2150:	88 ec       	ldi	r24, 0xC8	; 200
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	8f 8f       	std	Y+31, r24	; 0x1f
    2158:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215a:	98 a1       	ldd	r25, Y+32	; 0x20
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_sendCommand+0x646>
    2160:	98 a3       	std	Y+32, r25	; 0x20
    2162:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <LCD_sendCommand+0x63a>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9a a3       	std	Y+34, r25	; 0x22
    218a:	89 a3       	std	Y+33, r24	; 0x21
    218c:	89 a1       	ldd	r24, Y+33	; 0x21
    218e:	9a a1       	ldd	r25, Y+34	; 0x22
    2190:	9e 8f       	std	Y+30, r25	; 0x1e
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
    2194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2196:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_sendCommand+0x682>
    219c:	9e 8f       	std	Y+30, r25	; 0x1e
    219e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    21a0:	fe 01       	movw	r30, r28
    21a2:	ed 59       	subi	r30, 0x9D	; 157
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	98 2f       	mov	r25, r24
    21aa:	91 70       	andi	r25, 0x01	; 1
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	63 e0       	ldi	r22, 0x03	; 3
    21b0:	49 2f       	mov	r20, r25
    21b2:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    21b6:	fe 01       	movw	r30, r28
    21b8:	ed 59       	subi	r30, 0x9D	; 157
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	82 70       	andi	r24, 0x02	; 2
    21c4:	90 70       	andi	r25, 0x00	; 0
    21c6:	95 95       	asr	r25
    21c8:	87 95       	ror	r24
    21ca:	98 2f       	mov	r25, r24
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	62 e0       	ldi	r22, 0x02	; 2
    21d0:	49 2f       	mov	r20, r25
    21d2:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    21d6:	fe 01       	movw	r30, r28
    21d8:	ed 59       	subi	r30, 0x9D	; 157
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	88 2f       	mov	r24, r24
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	84 70       	andi	r24, 0x04	; 4
    21e4:	90 70       	andi	r25, 0x00	; 0
    21e6:	95 95       	asr	r25
    21e8:	87 95       	ror	r24
    21ea:	95 95       	asr	r25
    21ec:	87 95       	ror	r24
    21ee:	98 2f       	mov	r25, r24
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	49 2f       	mov	r20, r25
    21f6:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    21fa:	fe 01       	movw	r30, r28
    21fc:	ed 59       	subi	r30, 0x9D	; 157
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	88 70       	andi	r24, 0x08	; 8
    2208:	90 70       	andi	r25, 0x00	; 0
    220a:	95 95       	asr	r25
    220c:	87 95       	ror	r24
    220e:	95 95       	asr	r25
    2210:	87 95       	ror	r24
    2212:	95 95       	asr	r25
    2214:	87 95       	ror	r24
    2216:	98 2f       	mov	r25, r24
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	49 2f       	mov	r20, r25
    221e:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	a0 e8       	ldi	r26, 0x80	; 128
    2228:	bf e3       	ldi	r27, 0x3F	; 63
    222a:	89 8f       	std	Y+25, r24	; 0x19
    222c:	9a 8f       	std	Y+26, r25	; 0x1a
    222e:	ab 8f       	std	Y+27, r26	; 0x1b
    2230:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2232:	69 8d       	ldd	r22, Y+25	; 0x19
    2234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a ef       	ldi	r20, 0xFA	; 250
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8d 8b       	std	Y+21, r24	; 0x15
    224c:	9e 8b       	std	Y+22, r25	; 0x16
    224e:	af 8b       	std	Y+23, r26	; 0x17
    2250:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2252:	6d 89       	ldd	r22, Y+21	; 0x15
    2254:	7e 89       	ldd	r23, Y+22	; 0x16
    2256:	8f 89       	ldd	r24, Y+23	; 0x17
    2258:	98 8d       	ldd	r25, Y+24	; 0x18
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	5f e3       	ldi	r21, 0x3F	; 63
    2262:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2266:	88 23       	and	r24, r24
    2268:	2c f4       	brge	.+10     	; 0x2274 <LCD_sendCommand+0x75e>
		__ticks = 1;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
    2272:	3f c0       	rjmp	.+126    	; 0x22f2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	4c f5       	brge	.+82     	; 0x22de <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	69 8d       	ldd	r22, Y+25	; 0x19
    228e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
    22b4:	0f c0       	rjmp	.+30     	; 0x22d4 <LCD_sendCommand+0x7be>
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
    22be:	89 89       	ldd	r24, Y+17	; 0x11
    22c0:	9a 89       	ldd	r25, Y+18	; 0x12
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_sendCommand+0x7ac>
    22c6:	9a 8b       	std	Y+18, r25	; 0x12
    22c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ca:	8b 89       	ldd	r24, Y+19	; 0x13
    22cc:	9c 89       	ldd	r25, Y+20	; 0x14
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	9c 8b       	std	Y+20, r25	; 0x14
    22d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	69 f7       	brne	.-38     	; 0x22b6 <LCD_sendCommand+0x7a0>
    22dc:	14 c0       	rjmp	.+40     	; 0x2306 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22de:	6d 89       	ldd	r22, Y+21	; 0x15
    22e0:	7e 89       	ldd	r23, Y+22	; 0x16
    22e2:	8f 89       	ldd	r24, Y+23	; 0x17
    22e4:	98 8d       	ldd	r25, Y+24	; 0x18
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	8b 89       	ldd	r24, Y+19	; 0x13
    22f4:	9c 89       	ldd	r25, Y+20	; 0x14
    22f6:	98 8b       	std	Y+16, r25	; 0x10
    22f8:	8f 87       	std	Y+15, r24	; 0x0f
    22fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    22fc:	98 89       	ldd	r25, Y+16	; 0x10
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_sendCommand+0x7e8>
    2302:	98 8b       	std	Y+16, r25	; 0x10
    2304:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	64 e0       	ldi	r22, 0x04	; 4
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a0 e8       	ldi	r26, 0x80	; 128
    2316:	bf e3       	ldi	r27, 0x3F	; 63
    2318:	8b 87       	std	Y+11, r24	; 0x0b
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	ad 87       	std	Y+13, r26	; 0x0d
    231e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8f 83       	std	Y+7, r24	; 0x07
    233a:	98 87       	std	Y+8, r25	; 0x08
    233c:	a9 87       	std	Y+9, r26	; 0x09
    233e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <LCD_sendCommand+0x8ac>
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <LCD_sendCommand+0x89a>
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <LCD_sendCommand+0x88e>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_sendCommand+0x8d6>
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23f4:	cd 59       	subi	r28, 0x9D	; 157
    23f6:	df 4f       	sbci	r29, 0xFF	; 255
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	08 95       	ret

0000240c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	c3 56       	subi	r28, 0x63	; 99
    241a:	d0 40       	sbci	r29, 0x00	; 0
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	fe 01       	movw	r30, r28
    2428:	ed 59       	subi	r30, 0x9D	; 157
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	65 e0       	ldi	r22, 0x05	; 5
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    2438:	fe 01       	movw	r30, r28
    243a:	e1 5a       	subi	r30, 0xA1	; 161
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a0 e8       	ldi	r26, 0x80	; 128
    2444:	bf e3       	ldi	r27, 0x3F	; 63
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	8e 01       	movw	r16, r28
    2450:	05 5a       	subi	r16, 0xA5	; 165
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	e1 5a       	subi	r30, 0xA1	; 161
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247c:	fe 01       	movw	r30, r28
    247e:	e5 5a       	subi	r30, 0xA5	; 165
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	44 f4       	brge	.+16     	; 0x24aa <LCD_displayCharacter+0x9e>
		__ticks = 1;
    249a:	fe 01       	movw	r30, r28
    249c:	e7 5a       	subi	r30, 0xA7	; 167
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	64 c0       	rjmp	.+200    	; 0x2572 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24aa:	fe 01       	movw	r30, r28
    24ac:	e5 5a       	subi	r30, 0xA5	; 165
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	0c f0       	brlt	.+2      	; 0x24ca <LCD_displayCharacter+0xbe>
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	fe 01       	movw	r30, r28
    24cc:	e1 5a       	subi	r30, 0xA1	; 161
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8e 01       	movw	r16, r28
    24ea:	07 5a       	subi	r16, 0xA7	; 167
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	1f c0       	rjmp	.+62     	; 0x2540 <LCD_displayCharacter+0x134>
    2502:	fe 01       	movw	r30, r28
    2504:	e9 5a       	subi	r30, 0xA9	; 169
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	fe 01       	movw	r30, r28
    2512:	e9 5a       	subi	r30, 0xA9	; 169
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_displayCharacter+0x10e>
    251e:	fe 01       	movw	r30, r28
    2520:	e9 5a       	subi	r30, 0xA9	; 169
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	de 01       	movw	r26, r28
    252a:	a7 5a       	subi	r26, 0xA7	; 167
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e7 5a       	subi	r30, 0xA7	; 167
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	11 96       	adiw	r26, 0x01	; 1
    253c:	9c 93       	st	X, r25
    253e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	fe 01       	movw	r30, r28
    2542:	e7 5a       	subi	r30, 0xA7	; 167
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	d1 f6       	brne	.-76     	; 0x2502 <LCD_displayCharacter+0xf6>
    254e:	27 c0       	rjmp	.+78     	; 0x259e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	8e 01       	movw	r16, r28
    2552:	07 5a       	subi	r16, 0xA7	; 167
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	fe 01       	movw	r30, r28
    2558:	e5 5a       	subi	r30, 0xA5	; 165
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	f8 01       	movw	r30, r16
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    2572:	de 01       	movw	r26, r28
    2574:	ab 5a       	subi	r26, 0xAB	; 171
    2576:	bf 4f       	sbci	r27, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e7 5a       	subi	r30, 0xA7	; 167
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	8d 93       	st	X+, r24
    2584:	9c 93       	st	X, r25
    2586:	fe 01       	movw	r30, r28
    2588:	eb 5a       	subi	r30, 0xAB	; 171
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_displayCharacter+0x184>
    2594:	fe 01       	movw	r30, r28
    2596:	eb 5a       	subi	r30, 0xAB	; 171
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	64 e0       	ldi	r22, 0x04	; 4
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ef 5a       	subi	r30, 0xAF	; 175
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e8       	ldi	r26, 0x80	; 128
    25b4:	bf e3       	ldi	r27, 0x3F	; 63
    25b6:	80 83       	st	Z, r24
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	a2 83       	std	Z+2, r26	; 0x02
    25bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25be:	8e 01       	movw	r16, r28
    25c0:	03 5b       	subi	r16, 0xB3	; 179
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	fe 01       	movw	r30, r28
    25c6:	ef 5a       	subi	r30, 0xAF	; 175
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	60 81       	ld	r22, Z
    25cc:	71 81       	ldd	r23, Z+1	; 0x01
    25ce:	82 81       	ldd	r24, Z+2	; 0x02
    25d0:	93 81       	ldd	r25, Z+3	; 0x03
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a ef       	ldi	r20, 0xFA	; 250
    25d8:	54 e4       	ldi	r21, 0x44	; 68
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	f8 01       	movw	r30, r16
    25e4:	80 83       	st	Z, r24
    25e6:	91 83       	std	Z+1, r25	; 0x01
    25e8:	a2 83       	std	Z+2, r26	; 0x02
    25ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ec:	fe 01       	movw	r30, r28
    25ee:	e3 5b       	subi	r30, 0xB3	; 179
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	44 f4       	brge	.+16     	; 0x261a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    260a:	fe 01       	movw	r30, r28
    260c:	e5 5b       	subi	r30, 0xB5	; 181
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
    2618:	64 c0       	rjmp	.+200    	; 0x26e2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    261a:	fe 01       	movw	r30, r28
    261c:	e3 5b       	subi	r30, 0xB3	; 179
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	0c f0       	brlt	.+2      	; 0x263a <LCD_displayCharacter+0x22e>
    2638:	43 c0       	rjmp	.+134    	; 0x26c0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	fe 01       	movw	r30, r28
    263c:	ef 5a       	subi	r30, 0xAF	; 175
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	60 81       	ld	r22, Z
    2642:	71 81       	ldd	r23, Z+1	; 0x01
    2644:	82 81       	ldd	r24, Z+2	; 0x02
    2646:	93 81       	ldd	r25, Z+3	; 0x03
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8e 01       	movw	r16, r28
    265a:	05 5b       	subi	r16, 0xB5	; 181
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	1f c0       	rjmp	.+62     	; 0x26b0 <LCD_displayCharacter+0x2a4>
    2672:	fe 01       	movw	r30, r28
    2674:	e7 5b       	subi	r30, 0xB7	; 183
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	88 ec       	ldi	r24, 0xC8	; 200
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	fe 01       	movw	r30, r28
    2682:	e7 5b       	subi	r30, 0xB7	; 183
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <LCD_displayCharacter+0x27e>
    268e:	fe 01       	movw	r30, r28
    2690:	e7 5b       	subi	r30, 0xB7	; 183
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2698:	de 01       	movw	r26, r28
    269a:	a5 5b       	subi	r26, 0xB5	; 181
    269c:	bf 4f       	sbci	r27, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	e5 5b       	subi	r30, 0xB5	; 181
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	91 81       	ldd	r25, Z+1	; 0x01
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	11 96       	adiw	r26, 0x01	; 1
    26ac:	9c 93       	st	X, r25
    26ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	fe 01       	movw	r30, r28
    26b2:	e5 5b       	subi	r30, 0xB5	; 181
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	d1 f6       	brne	.-76     	; 0x2672 <LCD_displayCharacter+0x266>
    26be:	27 c0       	rjmp	.+78     	; 0x270e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	8e 01       	movw	r16, r28
    26c2:	05 5b       	subi	r16, 0xB5	; 181
    26c4:	1f 4f       	sbci	r17, 0xFF	; 255
    26c6:	fe 01       	movw	r30, r28
    26c8:	e3 5b       	subi	r30, 0xB3	; 179
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	60 81       	ld	r22, Z
    26ce:	71 81       	ldd	r23, Z+1	; 0x01
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	93 81       	ldd	r25, Z+3	; 0x03
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	f8 01       	movw	r30, r16
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    26e2:	de 01       	movw	r26, r28
    26e4:	a9 5b       	subi	r26, 0xB9	; 185
    26e6:	bf 4f       	sbci	r27, 0xFF	; 255
    26e8:	fe 01       	movw	r30, r28
    26ea:	e5 5b       	subi	r30, 0xB5	; 181
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	91 81       	ldd	r25, Z+1	; 0x01
    26f2:	8d 93       	st	X+, r24
    26f4:	9c 93       	st	X, r25
    26f6:	fe 01       	movw	r30, r28
    26f8:	e9 5b       	subi	r30, 0xB9	; 185
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_displayCharacter+0x2f4>
    2704:	fe 01       	movw	r30, r28
    2706:	e9 5b       	subi	r30, 0xB9	; 185
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    270e:	fe 01       	movw	r30, r28
    2710:	ed 59       	subi	r30, 0x9D	; 157
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	80 71       	andi	r24, 0x10	; 16
    271c:	90 70       	andi	r25, 0x00	; 0
    271e:	95 95       	asr	r25
    2720:	87 95       	ror	r24
    2722:	95 95       	asr	r25
    2724:	87 95       	ror	r24
    2726:	95 95       	asr	r25
    2728:	87 95       	ror	r24
    272a:	95 95       	asr	r25
    272c:	87 95       	ror	r24
    272e:	98 2f       	mov	r25, r24
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	63 e0       	ldi	r22, 0x03	; 3
    2734:	49 2f       	mov	r20, r25
    2736:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    273a:	fe 01       	movw	r30, r28
    273c:	ed 59       	subi	r30, 0x9D	; 157
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	80 72       	andi	r24, 0x20	; 32
    2748:	90 70       	andi	r25, 0x00	; 0
    274a:	95 95       	asr	r25
    274c:	87 95       	ror	r24
    274e:	95 95       	asr	r25
    2750:	87 95       	ror	r24
    2752:	95 95       	asr	r25
    2754:	87 95       	ror	r24
    2756:	95 95       	asr	r25
    2758:	87 95       	ror	r24
    275a:	95 95       	asr	r25
    275c:	87 95       	ror	r24
    275e:	98 2f       	mov	r25, r24
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	62 e0       	ldi	r22, 0x02	; 2
    2764:	49 2f       	mov	r20, r25
    2766:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    276a:	fe 01       	movw	r30, r28
    276c:	ed 59       	subi	r30, 0x9D	; 157
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	80 74       	andi	r24, 0x40	; 64
    2778:	90 70       	andi	r25, 0x00	; 0
    277a:	08 2e       	mov	r0, r24
    277c:	89 2f       	mov	r24, r25
    277e:	00 0c       	add	r0, r0
    2780:	88 1f       	adc	r24, r24
    2782:	99 0b       	sbc	r25, r25
    2784:	00 0c       	add	r0, r0
    2786:	88 1f       	adc	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	98 2f       	mov	r25, r24
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	49 2f       	mov	r20, r25
    2792:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2796:	fe 01       	movw	r30, r28
    2798:	ed 59       	subi	r30, 0x9D	; 157
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	98 2f       	mov	r25, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	99 27       	eor	r25, r25
    27a4:	99 1f       	adc	r25, r25
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	49 2f       	mov	r20, r25
    27ac:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    27b0:	fe 01       	movw	r30, r28
    27b2:	ed 5b       	subi	r30, 0xBD	; 189
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	a0 e8       	ldi	r26, 0x80	; 128
    27bc:	bf e3       	ldi	r27, 0x3F	; 63
    27be:	80 83       	st	Z, r24
    27c0:	91 83       	std	Z+1, r25	; 0x01
    27c2:	a2 83       	std	Z+2, r26	; 0x02
    27c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c6:	8e 01       	movw	r16, r28
    27c8:	01 5c       	subi	r16, 0xC1	; 193
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	fe 01       	movw	r30, r28
    27ce:	ed 5b       	subi	r30, 0xBD	; 189
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a ef       	ldi	r20, 0xFA	; 250
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	f8 01       	movw	r30, r16
    27ec:	80 83       	st	Z, r24
    27ee:	91 83       	std	Z+1, r25	; 0x01
    27f0:	a2 83       	std	Z+2, r26	; 0x02
    27f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f4:	fe 01       	movw	r30, r28
    27f6:	ff 96       	adiw	r30, 0x3f	; 63
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9e af       	std	Y+62, r25	; 0x3e
    2816:	8d af       	std	Y+61, r24	; 0x3d
    2818:	46 c0       	rjmp	.+140    	; 0x28a6 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    281a:	fe 01       	movw	r30, r28
    281c:	ff 96       	adiw	r30, 0x3f	; 63
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	3f ef       	ldi	r19, 0xFF	; 255
    282a:	4f e7       	ldi	r20, 0x7F	; 127
    282c:	57 e4       	ldi	r21, 0x47	; 71
    282e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2832:	18 16       	cp	r1, r24
    2834:	64 f5       	brge	.+88     	; 0x288e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	fe 01       	movw	r30, r28
    2838:	ed 5b       	subi	r30, 0xBD	; 189
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e af       	std	Y+62, r25	; 0x3e
    2862:	8d af       	std	Y+61, r24	; 0x3d
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_displayCharacter+0x478>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c af       	std	Y+60, r25	; 0x3c
    286c:	8b af       	std	Y+59, r24	; 0x3b
    286e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2870:	9c ad       	ldd	r25, Y+60	; 0x3c
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_displayCharacter+0x466>
    2876:	9c af       	std	Y+60, r25	; 0x3c
    2878:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8d ad       	ldd	r24, Y+61	; 0x3d
    287c:	9e ad       	ldd	r25, Y+62	; 0x3e
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9e af       	std	Y+62, r25	; 0x3e
    2882:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8d ad       	ldd	r24, Y+61	; 0x3d
    2886:	9e ad       	ldd	r25, Y+62	; 0x3e
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <LCD_displayCharacter+0x45a>
    288c:	16 c0       	rjmp	.+44     	; 0x28ba <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	fe 01       	movw	r30, r28
    2890:	ff 96       	adiw	r30, 0x3f	; 63
    2892:	60 81       	ld	r22, Z
    2894:	71 81       	ldd	r23, Z+1	; 0x01
    2896:	82 81       	ldd	r24, Z+2	; 0x02
    2898:	93 81       	ldd	r25, Z+3	; 0x03
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9e af       	std	Y+62, r25	; 0x3e
    28a4:	8d af       	std	Y+61, r24	; 0x3d
    28a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28aa:	9a af       	std	Y+58, r25	; 0x3a
    28ac:	89 af       	std	Y+57, r24	; 0x39
    28ae:	89 ad       	ldd	r24, Y+57	; 0x39
    28b0:	9a ad       	ldd	r25, Y+58	; 0x3a
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <LCD_displayCharacter+0x4a6>
    28b6:	9a af       	std	Y+58, r25	; 0x3a
    28b8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	64 e0       	ldi	r22, 0x04	; 4
    28be:	40 e0       	ldi	r20, 0x00	; 0
    28c0:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e8       	ldi	r26, 0x80	; 128
    28ca:	bf e3       	ldi	r27, 0x3F	; 63
    28cc:	8d ab       	std	Y+53, r24	; 0x35
    28ce:	9e ab       	std	Y+54, r25	; 0x36
    28d0:	af ab       	std	Y+55, r26	; 0x37
    28d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d4:	6d a9       	ldd	r22, Y+53	; 0x35
    28d6:	7e a9       	ldd	r23, Y+54	; 0x36
    28d8:	8f a9       	ldd	r24, Y+55	; 0x37
    28da:	98 ad       	ldd	r25, Y+56	; 0x38
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	4a ef       	ldi	r20, 0xFA	; 250
    28e2:	54 e4       	ldi	r21, 0x44	; 68
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	89 ab       	std	Y+49, r24	; 0x31
    28ee:	9a ab       	std	Y+50, r25	; 0x32
    28f0:	ab ab       	std	Y+51, r26	; 0x33
    28f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28f4:	69 a9       	ldd	r22, Y+49	; 0x31
    28f6:	7a a9       	ldd	r23, Y+50	; 0x32
    28f8:	8b a9       	ldd	r24, Y+51	; 0x33
    28fa:	9c a9       	ldd	r25, Y+52	; 0x34
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e8       	ldi	r20, 0x80	; 128
    2902:	5f e3       	ldi	r21, 0x3F	; 63
    2904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2908:	88 23       	and	r24, r24
    290a:	2c f4       	brge	.+10     	; 0x2916 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	98 ab       	std	Y+48, r25	; 0x30
    2912:	8f a7       	std	Y+47, r24	; 0x2f
    2914:	3f c0       	rjmp	.+126    	; 0x2994 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2916:	69 a9       	ldd	r22, Y+49	; 0x31
    2918:	7a a9       	ldd	r23, Y+50	; 0x32
    291a:	8b a9       	ldd	r24, Y+51	; 0x33
    291c:	9c a9       	ldd	r25, Y+52	; 0x34
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	3f ef       	ldi	r19, 0xFF	; 255
    2922:	4f e7       	ldi	r20, 0x7F	; 127
    2924:	57 e4       	ldi	r21, 0x47	; 71
    2926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292a:	18 16       	cp	r1, r24
    292c:	4c f5       	brge	.+82     	; 0x2980 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292e:	6d a9       	ldd	r22, Y+53	; 0x35
    2930:	7e a9       	ldd	r23, Y+54	; 0x36
    2932:	8f a9       	ldd	r24, Y+55	; 0x37
    2934:	98 ad       	ldd	r25, Y+56	; 0x38
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e2       	ldi	r20, 0x20	; 32
    293c:	51 e4       	ldi	r21, 0x41	; 65
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	bc 01       	movw	r22, r24
    2948:	cd 01       	movw	r24, r26
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	98 ab       	std	Y+48, r25	; 0x30
    2954:	8f a7       	std	Y+47, r24	; 0x2f
    2956:	0f c0       	rjmp	.+30     	; 0x2976 <LCD_displayCharacter+0x56a>
    2958:	88 ec       	ldi	r24, 0xC8	; 200
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9e a7       	std	Y+46, r25	; 0x2e
    295e:	8d a7       	std	Y+45, r24	; 0x2d
    2960:	8d a5       	ldd	r24, Y+45	; 0x2d
    2962:	9e a5       	ldd	r25, Y+46	; 0x2e
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_displayCharacter+0x558>
    2968:	9e a7       	std	Y+46, r25	; 0x2e
    296a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296c:	8f a5       	ldd	r24, Y+47	; 0x2f
    296e:	98 a9       	ldd	r25, Y+48	; 0x30
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	98 ab       	std	Y+48, r25	; 0x30
    2974:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2976:	8f a5       	ldd	r24, Y+47	; 0x2f
    2978:	98 a9       	ldd	r25, Y+48	; 0x30
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	69 f7       	brne	.-38     	; 0x2958 <LCD_displayCharacter+0x54c>
    297e:	14 c0       	rjmp	.+40     	; 0x29a8 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	69 a9       	ldd	r22, Y+49	; 0x31
    2982:	7a a9       	ldd	r23, Y+50	; 0x32
    2984:	8b a9       	ldd	r24, Y+51	; 0x33
    2986:	9c a9       	ldd	r25, Y+52	; 0x34
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	98 ab       	std	Y+48, r25	; 0x30
    2992:	8f a7       	std	Y+47, r24	; 0x2f
    2994:	8f a5       	ldd	r24, Y+47	; 0x2f
    2996:	98 a9       	ldd	r25, Y+48	; 0x30
    2998:	9c a7       	std	Y+44, r25	; 0x2c
    299a:	8b a7       	std	Y+43, r24	; 0x2b
    299c:	8b a5       	ldd	r24, Y+43	; 0x2b
    299e:	9c a5       	ldd	r25, Y+44	; 0x2c
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_displayCharacter+0x594>
    29a4:	9c a7       	std	Y+44, r25	; 0x2c
    29a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29a8:	80 e0       	ldi	r24, 0x00	; 0
    29aa:	64 e0       	ldi	r22, 0x04	; 4
    29ac:	41 e0       	ldi	r20, 0x01	; 1
    29ae:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	8f a3       	std	Y+39, r24	; 0x27
    29bc:	98 a7       	std	Y+40, r25	; 0x28
    29be:	a9 a7       	std	Y+41, r26	; 0x29
    29c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	6f a1       	ldd	r22, Y+39	; 0x27
    29c4:	78 a5       	ldd	r23, Y+40	; 0x28
    29c6:	89 a5       	ldd	r24, Y+41	; 0x29
    29c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8b a3       	std	Y+35, r24	; 0x23
    29dc:	9c a3       	std	Y+36, r25	; 0x24
    29de:	ad a3       	std	Y+37, r26	; 0x25
    29e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29e2:	6b a1       	ldd	r22, Y+35	; 0x23
    29e4:	7c a1       	ldd	r23, Y+36	; 0x24
    29e6:	8d a1       	ldd	r24, Y+37	; 0x25
    29e8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9a a3       	std	Y+34, r25	; 0x22
    2a00:	89 a3       	std	Y+33, r24	; 0x21
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a04:	6b a1       	ldd	r22, Y+35	; 0x23
    2a06:	7c a1       	ldd	r23, Y+36	; 0x24
    2a08:	8d a1       	ldd	r24, Y+37	; 0x25
    2a0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a20:	89 a5       	ldd	r24, Y+41	; 0x29
    2a22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9a a3       	std	Y+34, r25	; 0x22
    2a42:	89 a3       	std	Y+33, r24	; 0x21
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <LCD_displayCharacter+0x658>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	98 a3       	std	Y+32, r25	; 0x20
    2a4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a50:	98 a1       	ldd	r25, Y+32	; 0x20
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_displayCharacter+0x646>
    2a56:	98 a3       	std	Y+32, r25	; 0x20
    2a58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9a a3       	std	Y+34, r25	; 0x22
    2a62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	89 a1       	ldd	r24, Y+33	; 0x21
    2a66:	9a a1       	ldd	r25, Y+34	; 0x22
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <LCD_displayCharacter+0x63a>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2a70:	7c a1       	ldd	r23, Y+36	; 0x24
    2a72:	8d a1       	ldd	r24, Y+37	; 0x25
    2a74:	9e a1       	ldd	r25, Y+38	; 0x26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9a a3       	std	Y+34, r25	; 0x22
    2a80:	89 a3       	std	Y+33, r24	; 0x21
    2a82:	89 a1       	ldd	r24, Y+33	; 0x21
    2a84:	9a a1       	ldd	r25, Y+34	; 0x22
    2a86:	9e 8f       	std	Y+30, r25	; 0x1e
    2a88:	8d 8f       	std	Y+29, r24	; 0x1d
    2a8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_displayCharacter+0x682>
    2a92:	9e 8f       	std	Y+30, r25	; 0x1e
    2a94:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2a96:	fe 01       	movw	r30, r28
    2a98:	ed 59       	subi	r30, 0x9D	; 157
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	91 70       	andi	r25, 0x01	; 1
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	63 e0       	ldi	r22, 0x03	; 3
    2aa6:	49 2f       	mov	r20, r25
    2aa8:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 59       	subi	r30, 0x9D	; 157
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	82 70       	andi	r24, 0x02	; 2
    2aba:	90 70       	andi	r25, 0x00	; 0
    2abc:	95 95       	asr	r25
    2abe:	87 95       	ror	r24
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	62 e0       	ldi	r22, 0x02	; 2
    2ac6:	49 2f       	mov	r20, r25
    2ac8:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2acc:	fe 01       	movw	r30, r28
    2ace:	ed 59       	subi	r30, 0x9D	; 157
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	84 70       	andi	r24, 0x04	; 4
    2ada:	90 70       	andi	r25, 0x00	; 0
    2adc:	95 95       	asr	r25
    2ade:	87 95       	ror	r24
    2ae0:	95 95       	asr	r25
    2ae2:	87 95       	ror	r24
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	61 e0       	ldi	r22, 0x01	; 1
    2aea:	49 2f       	mov	r20, r25
    2aec:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2af0:	fe 01       	movw	r30, r28
    2af2:	ed 59       	subi	r30, 0x9D	; 157
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	88 70       	andi	r24, 0x08	; 8
    2afe:	90 70       	andi	r25, 0x00	; 0
    2b00:	95 95       	asr	r25
    2b02:	87 95       	ror	r24
    2b04:	95 95       	asr	r25
    2b06:	87 95       	ror	r24
    2b08:	95 95       	asr	r25
    2b0a:	87 95       	ror	r24
    2b0c:	98 2f       	mov	r25, r24
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	49 2f       	mov	r20, r25
    2b14:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a0 e8       	ldi	r26, 0x80	; 128
    2b1e:	bf e3       	ldi	r27, 0x3F	; 63
    2b20:	89 8f       	std	Y+25, r24	; 0x19
    2b22:	9a 8f       	std	Y+26, r25	; 0x1a
    2b24:	ab 8f       	std	Y+27, r26	; 0x1b
    2b26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	69 8d       	ldd	r22, Y+25	; 0x19
    2b2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a ef       	ldi	r20, 0xFA	; 250
    2b36:	54 e4       	ldi	r21, 0x44	; 68
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8d 8b       	std	Y+21, r24	; 0x15
    2b42:	9e 8b       	std	Y+22, r25	; 0x16
    2b44:	af 8b       	std	Y+23, r26	; 0x17
    2b46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9c 8b       	std	Y+20, r25	; 0x14
    2b66:	8b 8b       	std	Y+19, r24	; 0x13
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b70:	98 8d       	ldd	r25, Y+24	; 0x18
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	69 8d       	ldd	r22, Y+25	; 0x19
    2b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9c 8b       	std	Y+20, r25	; 0x14
    2ba8:	8b 8b       	std	Y+19, r24	; 0x13
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <LCD_displayCharacter+0x7be>
    2bac:	88 ec       	ldi	r24, 0xC8	; 200
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9a 8b       	std	Y+18, r25	; 0x12
    2bb2:	89 8b       	std	Y+17, r24	; 0x11
    2bb4:	89 89       	ldd	r24, Y+17	; 0x11
    2bb6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_displayCharacter+0x7ac>
    2bbc:	9a 8b       	std	Y+18, r25	; 0x12
    2bbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9c 8b       	std	Y+20, r25	; 0x14
    2bc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8b 89       	ldd	r24, Y+19	; 0x13
    2bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <LCD_displayCharacter+0x7a0>
    2bd2:	14 c0       	rjmp	.+40     	; 0x2bfc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bda:	98 8d       	ldd	r25, Y+24	; 0x18
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9c 8b       	std	Y+20, r25	; 0x14
    2be6:	8b 8b       	std	Y+19, r24	; 0x13
    2be8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bea:	9c 89       	ldd	r25, Y+20	; 0x14
    2bec:	98 8b       	std	Y+16, r25	; 0x10
    2bee:	8f 87       	std	Y+15, r24	; 0x0f
    2bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf2:	98 89       	ldd	r25, Y+16	; 0x10
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_displayCharacter+0x7e8>
    2bf8:	98 8b       	std	Y+16, r25	; 0x10
    2bfa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	64 e0       	ldi	r22, 0x04	; 4
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_writePin>
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a0 e8       	ldi	r26, 0x80	; 128
    2c0c:	bf e3       	ldi	r27, 0x3F	; 63
    2c0e:	8b 87       	std	Y+11, r24	; 0x0b
    2c10:	9c 87       	std	Y+12, r25	; 0x0c
    2c12:	ad 87       	std	Y+13, r26	; 0x0d
    2c14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	4a ef       	ldi	r20, 0xFA	; 250
    2c24:	54 e4       	ldi	r21, 0x44	; 68
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8f 83       	std	Y+7, r24	; 0x07
    2c30:	98 87       	std	Y+8, r25	; 0x08
    2c32:	a9 87       	std	Y+9, r26	; 0x09
    2c34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e8       	ldi	r20, 0x80	; 128
    2c44:	5f e3       	ldi	r21, 0x3F	; 63
    2c46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4a:	88 23       	and	r24, r24
    2c4c:	2c f4       	brge	.+10     	; 0x2c58 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	3f c0       	rjmp	.+126    	; 0x2cd6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2c58:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5a:	78 85       	ldd	r23, Y+8	; 0x08
    2c5c:	89 85       	ldd	r24, Y+9	; 0x09
    2c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	3f ef       	ldi	r19, 0xFF	; 255
    2c64:	4f e7       	ldi	r20, 0x7F	; 127
    2c66:	57 e4       	ldi	r21, 0x47	; 71
    2c68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c6c:	18 16       	cp	r1, r24
    2c6e:	4c f5       	brge	.+82     	; 0x2cc2 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e2       	ldi	r20, 0x20	; 32
    2c7e:	51 e4       	ldi	r21, 0x41	; 65
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	bc 01       	movw	r22, r24
    2c8a:	cd 01       	movw	r24, r26
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	0f c0       	rjmp	.+30     	; 0x2cb8 <LCD_displayCharacter+0x8ac>
    2c9a:	88 ec       	ldi	r24, 0xC8	; 200
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9c 83       	std	Y+4, r25	; 0x04
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <LCD_displayCharacter+0x89a>
    2caa:	9c 83       	std	Y+4, r25	; 0x04
    2cac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cae:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cba:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	69 f7       	brne	.-38     	; 0x2c9a <LCD_displayCharacter+0x88e>
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	9a 83       	std	Y+2, r25	; 0x02
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	f1 f7       	brne	.-4      	; 0x2ce2 <LCD_displayCharacter+0x8d6>
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2cea:	cd 59       	subi	r28, 0x9D	; 157
    2cec:	df 4f       	sbci	r29, 0xFF	; 255
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <LCD_displayString+0x6>
    2d08:	0f 92       	push	r0
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	9b 83       	std	Y+3, r25	; 0x03
    2d10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d12:	19 82       	std	Y+1, r1	; 0x01
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	fc 01       	movw	r30, r24
    2d22:	e2 0f       	add	r30, r18
    2d24:	f3 1f       	adc	r31, r19
    2d26:	80 81       	ld	r24, Z
    2d28:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_displayCharacter>
		i++;
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	8f 5f       	subi	r24, 0xFF	; 255
    2d30:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	e2 0f       	add	r30, r18
    2d40:	f3 1f       	adc	r31, r19
    2d42:	80 81       	ld	r24, Z
    2d44:	88 23       	and	r24, r24
    2d46:	39 f7       	brne	.-50     	; 0x2d16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <LCD_moveCursor+0x6>
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <LCD_moveCursor+0x8>
    2d5c:	0f 92       	push	r0
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	8a 83       	std	Y+2, r24	; 0x02
    2d64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	28 2f       	mov	r18, r24
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	3d 83       	std	Y+5, r19	; 0x05
    2d6e:	2c 83       	std	Y+4, r18	; 0x04
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	9d 81       	ldd	r25, Y+5	; 0x05
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	91 05       	cpc	r25, r1
    2d78:	c1 f0       	breq	.+48     	; 0x2daa <LCD_moveCursor+0x56>
    2d7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d7e:	22 30       	cpi	r18, 0x02	; 2
    2d80:	31 05       	cpc	r19, r1
    2d82:	2c f4       	brge	.+10     	; 0x2d8e <LCD_moveCursor+0x3a>
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	9d 81       	ldd	r25, Y+5	; 0x05
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	61 f0       	breq	.+24     	; 0x2da4 <LCD_moveCursor+0x50>
    2d8c:	19 c0       	rjmp	.+50     	; 0x2dc0 <LCD_moveCursor+0x6c>
    2d8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d90:	3d 81       	ldd	r19, Y+5	; 0x05
    2d92:	22 30       	cpi	r18, 0x02	; 2
    2d94:	31 05       	cpc	r19, r1
    2d96:	69 f0       	breq	.+26     	; 0x2db2 <LCD_moveCursor+0x5e>
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9c:	83 30       	cpi	r24, 0x03	; 3
    2d9e:	91 05       	cpc	r25, r1
    2da0:	61 f0       	breq	.+24     	; 0x2dba <LCD_moveCursor+0x66>
    2da2:	0e c0       	rjmp	.+28     	; 0x2dc0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	89 83       	std	Y+1, r24	; 0x01
    2da8:	0b c0       	rjmp	.+22     	; 0x2dc0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	80 5c       	subi	r24, 0xC0	; 192
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	07 c0       	rjmp	.+14     	; 0x2dc0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	80 5f       	subi	r24, 0xF0	; 240
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	03 c0       	rjmp	.+6      	; 0x2dc0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	80 5b       	subi	r24, 0xB0	; 176
    2dbe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	80 68       	ori	r24, 0x80	; 128
    2dc4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>
}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <LCD_displayStringRowColumn+0x6>
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <LCD_displayStringRowColumn+0x8>
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	6a 83       	std	Y+2, r22	; 0x02
    2de8:	5c 83       	std	Y+4, r21	; 0x04
    2dea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	6a 81       	ldd	r22, Y+2	; 0x02
    2df0:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	62 97       	sbiw	r28, 0x12	; 18
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	9a 8b       	std	Y+18, r25	; 0x12
    2e20:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e22:	89 89       	ldd	r24, Y+17	; 0x11
    2e24:	9a 89       	ldd	r25, Y+18	; 0x12
    2e26:	9e 01       	movw	r18, r28
    2e28:	2f 5f       	subi	r18, 0xFF	; 255
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	b9 01       	movw	r22, r18
    2e2e:	4a e0       	ldi	r20, 0x0A	; 10
    2e30:	50 e0       	ldi	r21, 0x00	; 0
    2e32:	0e 94 92 19 	call	0x3324	; 0x3324 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e36:	ce 01       	movw	r24, r28
    2e38:	01 96       	adiw	r24, 0x01	; 1
    2e3a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <LCD_displayString>
}
    2e3e:	62 96       	adiw	r28, 0x12	; 18
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <LCD_sendCommand>
}
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect){
    2e64:	1f 92       	push	r1
    2e66:	0f 92       	push	r0
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	0f 92       	push	r0
    2e6c:	11 24       	eor	r1, r1
    2e6e:	2f 93       	push	r18
    2e70:	3f 93       	push	r19
    2e72:	4f 93       	push	r20
    2e74:	5f 93       	push	r21
    2e76:	6f 93       	push	r22
    2e78:	7f 93       	push	r23
    2e7a:	8f 93       	push	r24
    2e7c:	9f 93       	push	r25
    2e7e:	af 93       	push	r26
    2e80:	bf 93       	push	r27
    2e82:	ef 93       	push	r30
    2e84:	ff 93       	push	r31
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2e8e:	80 91 10 01 	lds	r24, 0x0110
    2e92:	90 91 11 01 	lds	r25, 0x0111
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	29 f0       	breq	.+10     	; 0x2ea4 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2e9a:	e0 91 10 01 	lds	r30, 0x0110
    2e9e:	f0 91 11 01 	lds	r31, 0x0111
    2ea2:	09 95       	icall
	}
}
    2ea4:	cf 91       	pop	r28
    2ea6:	df 91       	pop	r29
    2ea8:	ff 91       	pop	r31
    2eaa:	ef 91       	pop	r30
    2eac:	bf 91       	pop	r27
    2eae:	af 91       	pop	r26
    2eb0:	9f 91       	pop	r25
    2eb2:	8f 91       	pop	r24
    2eb4:	7f 91       	pop	r23
    2eb6:	6f 91       	pop	r22
    2eb8:	5f 91       	pop	r21
    2eba:	4f 91       	pop	r20
    2ebc:	3f 91       	pop	r19
    2ebe:	2f 91       	pop	r18
    2ec0:	0f 90       	pop	r0
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	0f 90       	pop	r0
    2ec6:	1f 90       	pop	r1
    2ec8:	18 95       	reti

00002eca <__vector_9>:

ISR(TIMER1_OVF_vect){
    2eca:	1f 92       	push	r1
    2ecc:	0f 92       	push	r0
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	0f 92       	push	r0
    2ed2:	11 24       	eor	r1, r1
    2ed4:	2f 93       	push	r18
    2ed6:	3f 93       	push	r19
    2ed8:	4f 93       	push	r20
    2eda:	5f 93       	push	r21
    2edc:	6f 93       	push	r22
    2ede:	7f 93       	push	r23
    2ee0:	8f 93       	push	r24
    2ee2:	9f 93       	push	r25
    2ee4:	af 93       	push	r26
    2ee6:	bf 93       	push	r27
    2ee8:	ef 93       	push	r30
    2eea:	ff 93       	push	r31
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2ef4:	80 91 10 01 	lds	r24, 0x0110
    2ef8:	90 91 11 01 	lds	r25, 0x0111
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	29 f0       	breq	.+10     	; 0x2f0a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2f00:	e0 91 10 01 	lds	r30, 0x0110
    2f04:	f0 91 11 01 	lds	r31, 0x0111
    2f08:	09 95       	icall
	}
}
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	ff 91       	pop	r31
    2f10:	ef 91       	pop	r30
    2f12:	bf 91       	pop	r27
    2f14:	af 91       	pop	r26
    2f16:	9f 91       	pop	r25
    2f18:	8f 91       	pop	r24
    2f1a:	7f 91       	pop	r23
    2f1c:	6f 91       	pop	r22
    2f1e:	5f 91       	pop	r21
    2f20:	4f 91       	pop	r20
    2f22:	3f 91       	pop	r19
    2f24:	2f 91       	pop	r18
    2f26:	0f 90       	pop	r0
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	0f 90       	pop	r0
    2f2c:	1f 90       	pop	r1
    2f2e:	18 95       	reti

00002f30 <Timer1_init>:
 * 	1. Set the required clock.
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <Timer1_init+0x6>
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <Timer1_init+0x8>
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	9a 83       	std	Y+2, r25	; 0x02
    2f3e:	89 83       	std	Y+1, r24	; 0x01
switch(Config_Ptr->mode){
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	85 81       	ldd	r24, Z+5	; 0x05
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	3c 83       	std	Y+4, r19	; 0x04
    2f4c:	2b 83       	std	Y+3, r18	; 0x03
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	9c 81       	ldd	r25, Y+4	; 0x04
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <Timer1_init+0x32>
    2f56:	2b 81       	ldd	r18, Y+3	; 0x03
    2f58:	3c 81       	ldd	r19, Y+4	; 0x04
    2f5a:	21 30       	cpi	r18, 0x01	; 1
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	e1 f0       	breq	.+56     	; 0x2f98 <Timer1_init+0x68>
    2f60:	3e c0       	rjmp	.+124    	; 0x2fde <Timer1_init+0xae>
case NORMAL:
	TCNT1= Config_Ptr->initial_value;
    2f62:	ac e4       	ldi	r26, 0x4C	; 76
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e9 81       	ldd	r30, Y+1	; 0x01
    2f68:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	11 96       	adiw	r26, 0x01	; 1
    2f70:	9c 93       	st	X, r25
    2f72:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2f74:	ef e4       	ldi	r30, 0x4F	; 79
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	8c e0       	ldi	r24, 0x0C	; 12
    2f7a:	80 83       	st	Z, r24
	SET_BIT(TIMSK,TOIE1);
    2f7c:	a9 e5       	ldi	r26, 0x59	; 89
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e9 e5       	ldi	r30, 0x59	; 89
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	84 60       	ori	r24, 0x04	; 4
    2f88:	8c 93       	st	X, r24
	TCCR1B = (Config_Ptr->prescaler);
    2f8a:	ae e4       	ldi	r26, 0x4E	; 78
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f90:	fa 81       	ldd	r31, Y+2	; 0x02
    2f92:	84 81       	ldd	r24, Z+4	; 0x04
    2f94:	8c 93       	st	X, r24
    2f96:	23 c0       	rjmp	.+70     	; 0x2fde <Timer1_init+0xae>
	break;
case COMPARE:
	TCNT1= Config_Ptr->initial_value;
    2f98:	ac e4       	ldi	r26, 0x4C	; 76
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	9c 93       	st	X, r25
    2fa8:	8e 93       	st	-X, r24
	OCR1A= Config_Ptr->compare_value;
    2faa:	aa e4       	ldi	r26, 0x4A	; 74
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	11 96       	adiw	r26, 0x01	; 1
    2fb8:	9c 93       	st	X, r25
    2fba:	8e 93       	st	-X, r24
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2fbc:	ef e4       	ldi	r30, 0x4F	; 79
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	8c e0       	ldi	r24, 0x0C	; 12
    2fc2:	80 83       	st	Z, r24
	SET_BIT(TIMSK,OCIE1A);
    2fc4:	a9 e5       	ldi	r26, 0x59	; 89
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e9 e5       	ldi	r30, 0x59	; 89
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	80 61       	ori	r24, 0x10	; 16
    2fd0:	8c 93       	st	X, r24
	TCCR1B = (Config_Ptr->prescaler);
    2fd2:	ae e4       	ldi	r26, 0x4E	; 78
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fda:	84 81       	ldd	r24, Z+4	; 0x04
    2fdc:	8c 93       	st	X, r24
	break;
}

}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <Timer1_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <Timer1_setCallBack+0x6>
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffe:	90 93 11 01 	sts	0x0111, r25
    3002:	80 93 10 01 	sts	0x0110, r24
}
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	cf 91       	pop	r28
    300c:	df 91       	pop	r29
    300e:	08 95       	ret

00003010 <Timer1_deInit>:


/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Timer1_deInit(void){
    3010:	df 93       	push	r29
    3012:	cf 93       	push	r28
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0; // Stop Timer1 by clear the Clock bits
    3018:	ef e4       	ldi	r30, 0x4F	; 79
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	10 82       	st	Z, r1
	TCCR1B = 0; // Stop Timer1 by clear the Clock bits
    301e:	ee e4       	ldi	r30, 0x4E	; 78
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	10 82       	st	Z, r1
	OCR1A = 0;
    3024:	ea e4       	ldi	r30, 0x4A	; 74
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	11 82       	std	Z+1, r1	; 0x01
    302a:	10 82       	st	Z, r1
	/* Disable the Input Capture interrupt */
	CLEAR_BIT(TIMSK,TICIE1);
    302c:	a9 e5       	ldi	r26, 0x59	; 89
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e9 e5       	ldi	r30, 0x59	; 89
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	8f 7d       	andi	r24, 0xDF	; 223
    3038:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1A);
    303a:	a9 e5       	ldi	r26, 0x59	; 89
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e9 e5       	ldi	r30, 0x59	; 89
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	8f 7e       	andi	r24, 0xEF	; 239
    3046:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1B);
    3048:	a9 e5       	ldi	r26, 0x59	; 89
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e9 e5       	ldi	r30, 0x59	; 89
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	87 7f       	andi	r24, 0xF7	; 247
    3054:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE1);
    3056:	a9 e5       	ldi	r26, 0x59	; 89
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e9 e5       	ldi	r30, 0x59	; 89
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	8b 7f       	andi	r24, 0xFB	; 251
    3062:	8c 93       	st	X, r24
}
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <UART_init>:
 #include "common_macros.h" /* To use the macros like SET_BIT */
 #include "avr/io.h" /* To use the IO Ports Registers */
 #include "uart.h"


 void UART_init(UART_ConfigType * Config_Ptr){
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	00 d0       	rcall	.+0      	; 0x3070 <UART_init+0x6>
    3070:	00 d0       	rcall	.+0      	; 0x3072 <UART_init+0x8>
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	9c 83       	std	Y+4, r25	; 0x04
    3078:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    307a:	1a 82       	std	Y+2, r1	; 0x02
    307c:	19 82       	std	Y+1, r1	; 0x01
    /* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->UART_baudRate) * 8UL))) - 1);
    307e:	eb 81       	ldd	r30, Y+3	; 0x03
    3080:	fc 81       	ldd	r31, Y+4	; 0x04
    3082:	83 81       	ldd	r24, Z+3	; 0x03
    3084:	94 81       	ldd	r25, Z+4	; 0x04
    3086:	a5 81       	ldd	r26, Z+5	; 0x05
    3088:	b6 81       	ldd	r27, Z+6	; 0x06
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	aa 1f       	adc	r26, r26
    3090:	bb 1f       	adc	r27, r27
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	aa 1f       	adc	r26, r26
    3098:	bb 1f       	adc	r27, r27
    309a:	88 0f       	add	r24, r24
    309c:	99 1f       	adc	r25, r25
    309e:	aa 1f       	adc	r26, r26
    30a0:	bb 1f       	adc	r27, r27
    30a2:	9c 01       	movw	r18, r24
    30a4:	ad 01       	movw	r20, r26
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	92 e1       	ldi	r25, 0x12	; 18
    30aa:	aa e7       	ldi	r26, 0x7A	; 122
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 39 19 	call	0x3272	; 0x3272 <__udivmodsi4>
    30b6:	da 01       	movw	r26, r20
    30b8:	c9 01       	movw	r24, r18
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01

    CLEAR_BIT(UCSRC,URSEL);
    30c0:	a0 e4       	ldi	r26, 0x40	; 64
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e0 e4       	ldi	r30, 0x40	; 64
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	8f 77       	andi	r24, 0x7F	; 127
    30cc:	8c 93       	st	X, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint8)(ubrr_value>>8);
    30ce:	e0 e4       	ldi	r30, 0x40	; 64
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	9a 81       	ldd	r25, Y+2	; 0x02
    30d6:	89 2f       	mov	r24, r25
    30d8:	99 27       	eor	r25, r25
    30da:	80 83       	st	Z, r24
	UBRRL = (uint8)ubrr_value;
    30dc:	e9 e2       	ldi	r30, 0x29	; 41
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	80 83       	st	Z, r24

    UCSRA = (1<<U2X); /* U2X = 1 for double transmission speed */
    30e4:	eb e2       	ldi	r30, 0x2B	; 43
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	82 e0       	ldi	r24, 0x02	; 2
    30ea:	80 83       	st	Z, r24
    #if(UART_MODE==INTERRUPT)
        UCSRB = (1<<RXCIE) | (1<<TXCIE) | (1<<RXEN) | (1<<TXEN);
    #else
    UCSRB = (1<<RXEN) | (1<<TXEN);
    30ec:	ea e2       	ldi	r30, 0x2A	; 42
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	88 e1       	ldi	r24, 0x18	; 24
    30f2:	80 83       	st	Z, r24
    #endif




    UCSRC = (1<<URSEL) \
    30f4:	a0 e4       	ldi	r26, 0x40	; 64
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	eb 81       	ldd	r30, Y+3	; 0x03
    30fa:	fc 81       	ldd	r31, Y+4	; 0x04
    30fc:	82 81       	ldd	r24, Z+2	; 0x02
    30fe:	88 2f       	mov	r24, r24
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	28 2f       	mov	r18, r24
    3110:	20 68       	ori	r18, 0x80	; 128
    3112:	eb 81       	ldd	r30, Y+3	; 0x03
    3114:	fc 81       	ldd	r31, Y+4	; 0x04
    3116:	81 81       	ldd	r24, Z+1	; 0x01
    3118:	88 2f       	mov	r24, r24
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	82 95       	swap	r24
    311e:	92 95       	swap	r25
    3120:	90 7f       	andi	r25, 0xF0	; 240
    3122:	98 27       	eor	r25, r24
    3124:	80 7f       	andi	r24, 0xF0	; 240
    3126:	98 27       	eor	r25, r24
    3128:	28 2b       	or	r18, r24
    312a:	eb 81       	ldd	r30, Y+3	; 0x03
    312c:	fc 81       	ldd	r31, Y+4	; 0x04
    312e:	80 81       	ld	r24, Z
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	83 70       	andi	r24, 0x03	; 3
    3136:	90 70       	andi	r25, 0x00	; 0
    3138:	88 0f       	add	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	82 2b       	or	r24, r18
    313e:	8c 93       	st	X, r24
//		UCSRC |= (1<<URSEL)| (1<<UPM0) | (1<<UPM1);
//		break;
//	case RESEREVED:
//		break;
//}
 }
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <UART_sendByte>:

    void UART_sendByte(uint8 data){
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	0f 92       	push	r0
    3154:	cd b7       	in	r28, 0x3d	; 61
    3156:	de b7       	in	r29, 0x3e	; 62
    3158:	89 83       	std	Y+1, r24	; 0x01
        while(BIT_IS_CLEAR(UCSRA,UDRE)){
    315a:	eb e2       	ldi	r30, 0x2B	; 43
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	80 72       	andi	r24, 0x20	; 32
    3166:	90 70       	andi	r25, 0x00	; 0
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	b9 f3       	breq	.-18     	; 0x315a <UART_sendByte+0xc>

        }
        UDR = data;
    316c:	ec e2       	ldi	r30, 0x2C	; 44
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	80 83       	st	Z, r24
    }
    3174:	0f 90       	pop	r0
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <UART_receiveByte>:

    uint8 UART_receiveByte(void){
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	cd b7       	in	r28, 0x3d	; 61
    3182:	de b7       	in	r29, 0x3e	; 62
        while(BIT_IS_CLEAR(UCSRA,RXC)){
    3184:	eb e2       	ldi	r30, 0x2B	; 43
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	88 23       	and	r24, r24
    318c:	dc f7       	brge	.-10     	; 0x3184 <UART_receiveByte+0x8>

        }
        return UDR;
    318e:	ec e2       	ldi	r30, 0x2C	; 44
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    }
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <UART_sendString>:

    void UART_sendString(const uint8 *Str){
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	00 d0       	rcall	.+0      	; 0x31a0 <UART_sendString+0x6>
    31a0:	0f 92       	push	r0
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	9b 83       	std	Y+3, r25	; 0x03
    31a8:	8a 83       	std	Y+2, r24	; 0x02
        uint8 i = 0;
    31aa:	19 82       	std	Y+1, r1	; 0x01
    31ac:	0e c0       	rjmp	.+28     	; 0x31ca <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	fc 01       	movw	r30, r24
    31ba:	e2 0f       	add	r30, r18
    31bc:	f3 1f       	adc	r31, r19
    31be:	80 81       	ld	r24, Z
    31c0:	0e 94 a7 18 	call	0x314e	; 0x314e <UART_sendByte>
		i++;
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	89 83       	std	Y+1, r24	; 0x01
        return UDR;
    }

    void UART_sendString(const uint8 *Str){
        uint8 i = 0;
	while(Str[i] != '\0')
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	fc 01       	movw	r30, r24
    31d6:	e2 0f       	add	r30, r18
    31d8:	f3 1f       	adc	r31, r19
    31da:	80 81       	ld	r24, Z
    31dc:	88 23       	and	r24, r24
    31de:	39 f7       	brne	.-50     	; 0x31ae <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
    }
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <UART_receiveString>:
    
    void UART_receiveString(uint8 *Str){
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <UART_receiveString+0xa>
    31f6:	0f 92       	push	r0
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	9b 83       	std	Y+3, r25	; 0x03
    31fe:	8a 83       	std	Y+2, r24	; 0x02
         uint8 i = 0;
    3200:	19 82       	std	Y+1, r1	; 0x01
         /* Receive the first byte */
         	Str[i] = UART_receiveByte();
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	28 2f       	mov	r18, r24
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	9b 81       	ldd	r25, Y+3	; 0x03
    320c:	8c 01       	movw	r16, r24
    320e:	02 0f       	add	r16, r18
    3210:	13 1f       	adc	r17, r19
    3212:	0e 94 be 18 	call	0x317c	; 0x317c <UART_receiveByte>
    3216:	f8 01       	movw	r30, r16
    3218:	80 83       	st	Z, r24
    321a:	0f c0       	rjmp	.+30     	; 0x323a <UART_receiveString+0x4e>

         	/* Receive the whole string until the '#' */
         	while(Str[i] != '#')
         	{
         		i++;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	8f 5f       	subi	r24, 0xFF	; 255
    3220:	89 83       	std	Y+1, r24	; 0x01
         		Str[i] = UART_receiveByte();
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	28 2f       	mov	r18, r24
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	8c 01       	movw	r16, r24
    322e:	02 0f       	add	r16, r18
    3230:	13 1f       	adc	r17, r19
    3232:	0e 94 be 18 	call	0x317c	; 0x317c <UART_receiveByte>
    3236:	f8 01       	movw	r30, r16
    3238:	80 83       	st	Z, r24
         uint8 i = 0;
         /* Receive the first byte */
         	Str[i] = UART_receiveByte();

         	/* Receive the whole string until the '#' */
         	while(Str[i] != '#')
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	9b 81       	ldd	r25, Y+3	; 0x03
    3244:	fc 01       	movw	r30, r24
    3246:	e2 0f       	add	r30, r18
    3248:	f3 1f       	adc	r31, r19
    324a:	80 81       	ld	r24, Z
    324c:	83 32       	cpi	r24, 0x23	; 35
    324e:	31 f7       	brne	.-52     	; 0x321c <UART_receiveString+0x30>
         		i++;
         		Str[i] = UART_receiveByte();
         	}

         	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
         	Str[i] = '\0';
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	28 2f       	mov	r18, r24
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	9b 81       	ldd	r25, Y+3	; 0x03
    325a:	fc 01       	movw	r30, r24
    325c:	e2 0f       	add	r30, r18
    325e:	f3 1f       	adc	r31, r19
    3260:	10 82       	st	Z, r1
    }
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	08 95       	ret

00003272 <__udivmodsi4>:
    3272:	a1 e2       	ldi	r26, 0x21	; 33
    3274:	1a 2e       	mov	r1, r26
    3276:	aa 1b       	sub	r26, r26
    3278:	bb 1b       	sub	r27, r27
    327a:	fd 01       	movw	r30, r26
    327c:	0d c0       	rjmp	.+26     	; 0x3298 <__udivmodsi4_ep>

0000327e <__udivmodsi4_loop>:
    327e:	aa 1f       	adc	r26, r26
    3280:	bb 1f       	adc	r27, r27
    3282:	ee 1f       	adc	r30, r30
    3284:	ff 1f       	adc	r31, r31
    3286:	a2 17       	cp	r26, r18
    3288:	b3 07       	cpc	r27, r19
    328a:	e4 07       	cpc	r30, r20
    328c:	f5 07       	cpc	r31, r21
    328e:	20 f0       	brcs	.+8      	; 0x3298 <__udivmodsi4_ep>
    3290:	a2 1b       	sub	r26, r18
    3292:	b3 0b       	sbc	r27, r19
    3294:	e4 0b       	sbc	r30, r20
    3296:	f5 0b       	sbc	r31, r21

00003298 <__udivmodsi4_ep>:
    3298:	66 1f       	adc	r22, r22
    329a:	77 1f       	adc	r23, r23
    329c:	88 1f       	adc	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	1a 94       	dec	r1
    32a2:	69 f7       	brne	.-38     	; 0x327e <__udivmodsi4_loop>
    32a4:	60 95       	com	r22
    32a6:	70 95       	com	r23
    32a8:	80 95       	com	r24
    32aa:	90 95       	com	r25
    32ac:	9b 01       	movw	r18, r22
    32ae:	ac 01       	movw	r20, r24
    32b0:	bd 01       	movw	r22, r26
    32b2:	cf 01       	movw	r24, r30
    32b4:	08 95       	ret

000032b6 <__prologue_saves__>:
    32b6:	2f 92       	push	r2
    32b8:	3f 92       	push	r3
    32ba:	4f 92       	push	r4
    32bc:	5f 92       	push	r5
    32be:	6f 92       	push	r6
    32c0:	7f 92       	push	r7
    32c2:	8f 92       	push	r8
    32c4:	9f 92       	push	r9
    32c6:	af 92       	push	r10
    32c8:	bf 92       	push	r11
    32ca:	cf 92       	push	r12
    32cc:	df 92       	push	r13
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	ca 1b       	sub	r28, r26
    32e0:	db 0b       	sbc	r29, r27
    32e2:	0f b6       	in	r0, 0x3f	; 63
    32e4:	f8 94       	cli
    32e6:	de bf       	out	0x3e, r29	; 62
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	cd bf       	out	0x3d, r28	; 61
    32ec:	09 94       	ijmp

000032ee <__epilogue_restores__>:
    32ee:	2a 88       	ldd	r2, Y+18	; 0x12
    32f0:	39 88       	ldd	r3, Y+17	; 0x11
    32f2:	48 88       	ldd	r4, Y+16	; 0x10
    32f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    32f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    32f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    32fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    32fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    32fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3300:	b9 84       	ldd	r11, Y+9	; 0x09
    3302:	c8 84       	ldd	r12, Y+8	; 0x08
    3304:	df 80       	ldd	r13, Y+7	; 0x07
    3306:	ee 80       	ldd	r14, Y+6	; 0x06
    3308:	fd 80       	ldd	r15, Y+5	; 0x05
    330a:	0c 81       	ldd	r16, Y+4	; 0x04
    330c:	1b 81       	ldd	r17, Y+3	; 0x03
    330e:	aa 81       	ldd	r26, Y+2	; 0x02
    3310:	b9 81       	ldd	r27, Y+1	; 0x01
    3312:	ce 0f       	add	r28, r30
    3314:	d1 1d       	adc	r29, r1
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	ed 01       	movw	r28, r26
    3322:	08 95       	ret

00003324 <itoa>:
    3324:	fb 01       	movw	r30, r22
    3326:	9f 01       	movw	r18, r30
    3328:	e8 94       	clt
    332a:	42 30       	cpi	r20, 0x02	; 2
    332c:	c4 f0       	brlt	.+48     	; 0x335e <itoa+0x3a>
    332e:	45 32       	cpi	r20, 0x25	; 37
    3330:	b4 f4       	brge	.+44     	; 0x335e <itoa+0x3a>
    3332:	4a 30       	cpi	r20, 0x0A	; 10
    3334:	29 f4       	brne	.+10     	; 0x3340 <itoa+0x1c>
    3336:	97 fb       	bst	r25, 7
    3338:	1e f4       	brtc	.+6      	; 0x3340 <itoa+0x1c>
    333a:	90 95       	com	r25
    333c:	81 95       	neg	r24
    333e:	9f 4f       	sbci	r25, 0xFF	; 255
    3340:	64 2f       	mov	r22, r20
    3342:	77 27       	eor	r23, r23
    3344:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
    3348:	80 5d       	subi	r24, 0xD0	; 208
    334a:	8a 33       	cpi	r24, 0x3A	; 58
    334c:	0c f0       	brlt	.+2      	; 0x3350 <itoa+0x2c>
    334e:	89 5d       	subi	r24, 0xD9	; 217
    3350:	81 93       	st	Z+, r24
    3352:	cb 01       	movw	r24, r22
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	a1 f7       	brne	.-24     	; 0x3340 <itoa+0x1c>
    3358:	16 f4       	brtc	.+4      	; 0x335e <itoa+0x3a>
    335a:	5d e2       	ldi	r21, 0x2D	; 45
    335c:	51 93       	st	Z+, r21
    335e:	10 82       	st	Z, r1
    3360:	c9 01       	movw	r24, r18
    3362:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <strrev>

00003366 <strrev>:
    3366:	dc 01       	movw	r26, r24
    3368:	fc 01       	movw	r30, r24
    336a:	67 2f       	mov	r22, r23
    336c:	71 91       	ld	r23, Z+
    336e:	77 23       	and	r23, r23
    3370:	e1 f7       	brne	.-8      	; 0x336a <strrev+0x4>
    3372:	32 97       	sbiw	r30, 0x02	; 2
    3374:	04 c0       	rjmp	.+8      	; 0x337e <strrev+0x18>
    3376:	7c 91       	ld	r23, X
    3378:	6d 93       	st	X+, r22
    337a:	70 83       	st	Z, r23
    337c:	62 91       	ld	r22, -Z
    337e:	ae 17       	cp	r26, r30
    3380:	bf 07       	cpc	r27, r31
    3382:	c8 f3       	brcs	.-14     	; 0x3376 <strrev+0x10>
    3384:	08 95       	ret

00003386 <__udivmodhi4>:
    3386:	aa 1b       	sub	r26, r26
    3388:	bb 1b       	sub	r27, r27
    338a:	51 e1       	ldi	r21, 0x11	; 17
    338c:	07 c0       	rjmp	.+14     	; 0x339c <__udivmodhi4_ep>

0000338e <__udivmodhi4_loop>:
    338e:	aa 1f       	adc	r26, r26
    3390:	bb 1f       	adc	r27, r27
    3392:	a6 17       	cp	r26, r22
    3394:	b7 07       	cpc	r27, r23
    3396:	10 f0       	brcs	.+4      	; 0x339c <__udivmodhi4_ep>
    3398:	a6 1b       	sub	r26, r22
    339a:	b7 0b       	sbc	r27, r23

0000339c <__udivmodhi4_ep>:
    339c:	88 1f       	adc	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	5a 95       	dec	r21
    33a2:	a9 f7       	brne	.-22     	; 0x338e <__udivmodhi4_loop>
    33a4:	80 95       	com	r24
    33a6:	90 95       	com	r25
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	08 95       	ret

000033ae <_exit>:
    33ae:	f8 94       	cli

000033b0 <__stop_program>:
    33b0:	ff cf       	rjmp	.-2      	; 0x33b0 <__stop_program>
